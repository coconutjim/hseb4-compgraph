//--------------------------------------------------------------------------------------
//  Вращающаяся сфера с градиентными вершинами
//--------------------------------------------------------------------------------------

#pragma comment(lib, "d3d10.lib") 
#pragma comment(lib, "d3dx10.lib")

#include <windows.h>
#include <d3d10.h>
#include <d3dx10.h>

// Ширина и высота окна
#define WINDOW_WIDTH  800
#define WINDOW_HEIGHT 600

//--------------------------------------------------------------------------------------
// Структуры
//--------------------------------------------------------------------------------------
struct SimpleVertex
{
	D3DXVECTOR3 Pos;
	D3DXVECTOR2 Texcoord;
};

//--------------------------------------------------------------------------------------
// Глобальные переменные
//--------------------------------------------------------------------------------------
HWND        g_hWnd = NULL;
D3D10_DRIVER_TYPE       g_driverType = D3D10_DRIVER_TYPE_NULL;
ID3D10Device*           g_pd3dDevice = NULL;
IDXGISwapChain*         g_pSwapChain = NULL;
ID3D10RenderTargetView* g_pRenderTargetView = NULL;

ID3D10Effect*           g_pEffect = NULL;
ID3D10EffectTechnique*  g_pTechnique = NULL;
ID3D10InputLayout*      g_pVertexLayout = NULL;
ID3D10Buffer*           g_pVertexBuffer = NULL;

ID3D10Buffer*               g_pIndexBuffer = NULL;

ID3D10EffectMatrixVariable* g_pWorldVariable = NULL;
ID3D10EffectMatrixVariable* g_pViewVariable = NULL;
ID3D10EffectMatrixVariable* g_pProjectionVariable = NULL;
ID3D10EffectShaderResourceVariable* g_pTexResource = NULL;

ID3D10ShaderResourceView* g_pShaderResource = NULL;

D3DXMATRIX                  g_World;
D3DXMATRIX                  g_View;
D3DXMATRIX                  g_Projection;

//--------------------------------------------------------------------------------------
// Прототипы функций
//--------------------------------------------------------------------------------------
HRESULT             InitWindow(HINSTANCE hInstance, int nCmdShow);
HRESULT				InitDirect3D10();
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
void                Cleanup();
void                RenderScene();

//--------------------------------------------------------------------------------------
// С этой функции начинается выполнение программы
//--------------------------------------------------------------------------------------
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
	// Создаем окно приложения
	if (FAILED(InitWindow(hInstance, nCmdShow)))
		return 0;
	// Инициализируем Direct3D
	if (FAILED(InitDirect3D10()))
	{
		Cleanup();
		return 0;
	}

	// Цикл обработки сообщений
	MSG msg = { 0 };
	while (WM_QUIT != msg.message)
	{
		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
		else
		{
			RenderScene();
		}

	}

	Cleanup();
	return (int)msg.wParam;
}

//--------------------------------------------------------------------------------------
// Регистрация класса и создание окна
//--------------------------------------------------------------------------------------
HRESULT InitWindow(HINSTANCE hInstance, int nCmdShow)
{
	// Регистрируем класс окна
	WNDCLASSEX wc;
	wc.cbSize = sizeof(WNDCLASSEX);
	wc.style = CS_HREDRAW | CS_VREDRAW;
	wc.lpfnWndProc = WndProc;
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hInstance = hInstance;
	wc.hIcon = NULL;
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	wc.lpszMenuName = NULL;
	wc.lpszClassName = L"SimpleWindowClass";
	wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	if (!RegisterClassEx(&wc))
		return E_FAIL;

	// Создаем окно
	g_hWnd = CreateWindow(
		L"SimpleWindowClass",
		L"DirectX 10: Наложение текстуры",
		WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		WINDOW_WIDTH,
		WINDOW_HEIGHT,
		NULL,
		NULL,
		hInstance,
		NULL);

	// Если не удалось создать окно - выходим из функции
	if (!g_hWnd)
		return E_FAIL;
	// Отображаем окно на экране
	ShowWindow(g_hWnd, nCmdShow);
	UpdateWindow(g_hWnd);

	return S_OK;
}

//--------------------------------------------------------------------------------------
// Инициализация Direct3D
//--------------------------------------------------------------------------------------
HRESULT InitDirect3D10()
{
	HRESULT hr = S_OK;

	// Размеры клиентской области окна
	RECT rc;
	GetClientRect(g_hWnd, &rc);
	UINT width = rc.right - rc.left;
	UINT height = rc.bottom - rc.top;

	// Список возможных типов устройства
	D3D10_DRIVER_TYPE driverTypes[] =
	{
		D3D10_DRIVER_TYPE_HARDWARE,
		D3D10_DRIVER_TYPE_REFERENCE,
	};
	UINT numDriverTypes = sizeof(driverTypes) / sizeof(driverTypes[0]);

	// Заполняем структуру 
	DXGI_SWAP_CHAIN_DESC sd;
	ZeroMemory(&sd, sizeof(sd));
	sd.BufferCount = 1;
	sd.BufferDesc.Width = width;
	sd.BufferDesc.Height = height;
	sd.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
	sd.BufferDesc.RefreshRate.Numerator = 60;
	sd.BufferDesc.RefreshRate.Denominator = 1;
	sd.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;
	sd.OutputWindow = g_hWnd;
	sd.SampleDesc.Count = 1;
	sd.SampleDesc.Quality = 0;
	sd.Windowed = TRUE;

	// Пытаемся создать устройство, проходя по списку
	// как только получилось - выходим из цикла
	for (UINT driverTypeIndex = 0; driverTypeIndex < numDriverTypes; driverTypeIndex++)
	{
		g_driverType = driverTypes[driverTypeIndex];
		hr = D3D10CreateDeviceAndSwapChain(NULL, g_driverType, NULL, 0,
			D3D10_SDK_VERSION, &sd, &g_pSwapChain, &g_pd3dDevice);
		if (SUCCEEDED(hr))
			break;
	}
	if (FAILED(hr))
		return hr;

	// Представление данных для
	// буфера визуализации
	ID3D10Texture2D *pBackBuffer;
	hr = g_pSwapChain->GetBuffer(0, __uuidof(ID3D10Texture2D), (LPVOID*)&pBackBuffer);
	if (FAILED(hr))
		return hr;
	// Создадим представление данных
	hr = g_pd3dDevice->CreateRenderTargetView(pBackBuffer, NULL, &g_pRenderTargetView);
	pBackBuffer->Release();
	if (FAILED(hr))
		return hr;
	// Свяжем буфер визуализации с графическим конвейером
	g_pd3dDevice->OMSetRenderTargets(1, &g_pRenderTargetView, NULL);

	// Настроим область отображения
	D3D10_VIEWPORT vp;
	vp.Width = width;
	vp.Height = height;
	vp.MinDepth = 0.0f;
	vp.MaxDepth = 1.0f;
	vp.TopLeftX = 0;
	vp.TopLeftY = 0;
	g_pd3dDevice->RSSetViewports(1, &vp);

	// Используем наши шейдеры 
	// в файле эффектов cube_texture.fx
	hr = D3DX10CreateEffectFromFile(L"Sphere.fx", NULL, NULL, "fx_4_0", D3D10_SHADER_ENABLE_STRICTNESS, 0,
		g_pd3dDevice, NULL, NULL, &g_pEffect, NULL, NULL);
	if (FAILED(hr))
	{
		MessageBox(NULL, L"Не удается обнаружить файл эффектов (FX). Файл эффектов должен находиться в той же папке, что и исполняемый файл", L"Ошибка", MB_OK);
		return hr;
	}

	// Извлекаем технику отображения
	g_pTechnique = g_pEffect->GetTechniqueByName("RenderTexture");

	D3DX10_IMAGE_INFO InfoFromFile;
	D3DX10_IMAGE_LOAD_INFO LoadImageInfo;

	// Читаем информацию об изображении из файла
	hr = D3DX10GetImageInfoFromFile(L"pic.bmp", NULL, &InfoFromFile, NULL);

	LoadImageInfo.Width = InfoFromFile.Width;
	LoadImageInfo.Height = InfoFromFile.Height;
	LoadImageInfo.Depth = InfoFromFile.Depth;
	LoadImageInfo.FirstMipLevel = 1;
	LoadImageInfo.MipLevels = InfoFromFile.MipLevels;
	LoadImageInfo.Usage = D3D10_USAGE_DEFAULT;
	LoadImageInfo.BindFlags = D3D10_BIND_SHADER_RESOURCE;
	LoadImageInfo.CpuAccessFlags = 0;
	LoadImageInfo.MiscFlags = 0;
	LoadImageInfo.Format = InfoFromFile.Format;
	LoadImageInfo.Filter = D3DX10_FILTER_NONE;
	LoadImageInfo.MipFilter = D3DX10_FILTER_NONE;
	LoadImageInfo.pSrcInfo = &InfoFromFile;

	hr = D3DX10CreateShaderResourceViewFromFile(g_pd3dDevice, L"pic.bmp", &LoadImageInfo, NULL, &g_pShaderResource, NULL);
	if (FAILED(hr))
		return hr;

	// Связь с переменными шейдера
	g_pWorldVariable = g_pEffect->GetVariableByName("World")->AsMatrix();
	g_pViewVariable = g_pEffect->GetVariableByName("View")->AsMatrix();
	g_pProjectionVariable = g_pEffect->GetVariableByName("Projection")->AsMatrix();
	g_pTexResource = g_pEffect->GetVariableByName("g_txDiffuse")->AsShaderResource();

	g_pTexResource->SetResource(g_pShaderResource);

	// Описываем формат входных данных
	D3D10_INPUT_ELEMENT_DESC layout[] =
	{
		{ "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D10_INPUT_PER_VERTEX_DATA, 0 },
		{ "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT, 0, 12, D3D10_INPUT_PER_VERTEX_DATA, 0 }
	};
	UINT numElements = sizeof(layout) / sizeof(layout[0]);

	// Создаем объект входных данных
	D3D10_PASS_DESC PassDesc;
	g_pTechnique->GetPassByIndex(0)->GetDesc(&PassDesc);
	hr = g_pd3dDevice->CreateInputLayout(layout, numElements, PassDesc.pIAInputSignature, PassDesc.IAInputSignatureSize, &g_pVertexLayout);
	if (FAILED(hr))
		return hr;

	// Связываем объект входных данных с графическим конвейером
	g_pd3dDevice->IASetInputLayout(g_pVertexLayout);

	const int vcount = 258;
	const int icount = 1440;

	// Создаем буфер точек
	DWORD indices[] = {
		0, 1, 2,
		3, 4, 5,
		4, 6, 5,
		7, 8, 9,
		7, 10, 8,
		6, 11, 5,
		11, 12, 5,
		7, 13, 10,
		7, 14, 13,
		12, 15, 5,
		15, 16, 5,
		7, 17, 14,
		7, 18, 17,
		16, 19, 5,
		19, 20, 5,
		7, 21, 18,
		0, 22, 23,
		20, 24, 5,
		24, 25, 5,
		0, 26, 22,
		0, 27, 26,
		25, 28, 5,
		28, 29, 5,
		0, 30, 27,
		0, 31, 30,
		29, 32, 5,
		32, 33, 5,
		0, 34, 31,
		0, 35, 34,
		33, 36, 5,
		36, 3, 5,
		0, 2, 35,
		35, 2, 37,
		35, 37, 38,
		38, 37, 39,
		38, 39, 40,
		40, 39, 41,
		40, 41, 42,
		42, 41, 43,
		42, 43, 44,
		44, 43, 45,
		44, 45, 46,
		46, 45, 47,
		46, 47, 48,
		48, 47, 49,
		48, 49, 50,
		50, 49, 51,
		50, 51, 52,
		52, 51, 53,
		52, 53, 54,
		54, 53, 55,
		54, 55, 56,
		56, 55, 57,
		55, 58, 57,
		57, 58, 59,
		57, 59, 60,
		60, 59, 61,
		60, 61, 62,
		3, 36, 62,
		3, 62, 61,
		63, 62, 36,
		63, 36, 33,
		64, 60, 62,
		64, 62, 63,
		65, 57, 60,
		65, 60, 64,
		66, 56, 57,
		66, 57, 65,
		67, 54, 56,
		67, 56, 66,
		68, 52, 54,
		68, 54, 67,
		69, 50, 52,
		69, 52, 68,
		70, 48, 50,
		70, 50, 69,
		71, 46, 48,
		71, 48, 70,
		72, 44, 46,
		72, 46, 71,
		73, 42, 44,
		73, 44, 72,
		74, 40, 42,
		74, 42, 73,
		75, 38, 40,
		75, 40, 74,
		34, 35, 38,
		34, 38, 75,
		31, 34, 75,
		31, 75, 76,
		76, 75, 74,
		76, 74, 77,
		77, 74, 73,
		77, 73, 78,
		78, 73, 72,
		78, 72, 79,
		79, 72, 71,
		79, 71, 80,
		80, 71, 70,
		80, 70, 81,
		81, 70, 69,
		81, 69, 82,
		82, 69, 68,
		82, 68, 83,
		83, 68, 67,
		83, 67, 84,
		84, 67, 66,
		84, 66, 85,
		85, 66, 65,
		85, 65, 86,
		86, 65, 64,
		86, 64, 87,
		87, 64, 63,
		87, 63, 88,
		88, 63, 33,
		88, 33, 32,
		89, 88, 32,
		89, 32, 29,
		90, 87, 88,
		90, 88, 89,
		91, 86, 87,
		91, 87, 90,
		92, 85, 91,
		85, 86, 91,
		93, 84, 85,
		93, 85, 92,
		94, 83, 84,
		94, 84, 93,
		95, 82, 83,
		95, 83, 94,
		96, 81, 82,
		96, 82, 95,
		97, 80, 81,
		97, 81, 96,
		98, 79, 80,
		98, 80, 97,
		99, 78, 79,
		99, 79, 98,
		100, 77, 78,
		100, 78, 99,
		101, 76, 77,
		101, 77, 100,
		30, 31, 76,
		30, 76, 101,
		27, 30, 101,
		27, 101, 102,
		102, 101, 100,
		102, 100, 103,
		103, 100, 99,
		103, 99, 104,
		104, 99, 98,
		104, 98, 105,
		105, 98, 97,
		105, 97, 106,
		106, 97, 96,
		106, 96, 107,
		107, 96, 95,
		107, 95, 108,
		108, 95, 94,
		108, 94, 109,
		109, 94, 93,
		109, 93, 110,
		110, 93, 92,
		110, 92, 111,
		111, 92, 112,
		92, 91, 112,
		112, 91, 90,
		112, 90, 113,
		113, 90, 89,
		113, 89, 114,
		114, 89, 29,
		114, 29, 28,
		115, 114, 28,
		115, 28, 25,
		116, 113, 114,
		116, 114, 115,
		117, 112, 113,
		117, 113, 116,
		118, 111, 117,
		111, 112, 117,
		119, 110, 111,
		119, 111, 118,
		120, 109, 110,
		120, 110, 119,
		121, 108, 109,
		121, 109, 120,
		122, 107, 108,
		122, 108, 121,
		123, 106, 107,
		123, 107, 122,
		124, 105, 106,
		124, 106, 123,
		125, 104, 105,
		125, 105, 124,
		126, 103, 104,
		126, 104, 125,
		127, 102, 103,
		127, 103, 126,
		26, 27, 102,
		26, 102, 127,
		22, 26, 127,
		22, 127, 128,
		128, 127, 126,
		128, 126, 129,
		129, 126, 125,
		129, 125, 130,
		130, 125, 124,
		130, 124, 131,
		131, 124, 123,
		131, 123, 132,
		132, 123, 122,
		132, 122, 133,
		133, 122, 121,
		133, 121, 134,
		134, 121, 120,
		134, 120, 135,
		135, 120, 119,
		135, 119, 136,
		136, 119, 118,
		136, 118, 137,
		137, 118, 138,
		118, 117, 138,
		138, 117, 116,
		139, 140, 141,
		141, 140, 142,
		116, 115, 142,
		142, 115, 25,
		142, 25, 24,
		143, 142, 24,
		143, 24, 20,
		144, 141, 142,
		144, 142, 143,
		145, 139, 141,
		145, 141, 144,
		146, 147, 145,
		147, 139, 145,
		148, 149, 147,
		148, 147, 146,
		150, 151, 149,
		150, 149, 148,
		152, 153, 151,
		152, 151, 150,
		154, 155, 153,
		154, 153, 152,
		156, 157, 154,
		157, 155, 154,
		158, 159, 157,
		158, 157, 156,
		160, 161, 159,
		160, 159, 158,
		162, 163, 161,
		162, 161, 160,
		164, 165, 163,
		164, 163, 162,
		23, 22, 128,
		21, 165, 164,
		18, 21, 164,
		18, 164, 166,
		166, 164, 162,
		166, 162, 167,
		167, 162, 160,
		167, 160, 168,
		168, 160, 158,
		168, 158, 169,
		169, 158, 156,
		169, 156, 170,
		170, 156, 171,
		156, 154, 171,
		171, 154, 152,
		171, 152, 172,
		172, 152, 150,
		172, 150, 173,
		173, 150, 148,
		173, 148, 174,
		174, 148, 146,
		174, 146, 175,
		175, 146, 145,
		175, 145, 176,
		176, 145, 144,
		176, 144, 177,
		177, 144, 143,
		177, 143, 178,
		178, 143, 20,
		178, 20, 19,
		179, 178, 19,
		179, 19, 16,
		180, 177, 178,
		180, 178, 179,
		181, 176, 177,
		181, 177, 180,
		182, 175, 176,
		182, 176, 181,
		183, 174, 175,
		183, 175, 182,
		184, 173, 174,
		184, 174, 183,
		185, 172, 173,
		185, 173, 184,
		186, 171, 172,
		186, 172, 185,
		187, 170, 186,
		170, 171, 186,
		188, 169, 170,
		188, 170, 187,
		189, 168, 169,
		189, 169, 188,
		190, 167, 168,
		190, 168, 189,
		191, 166, 167,
		191, 167, 190,
		17, 18, 166,
		17, 166, 191,
		14, 17, 191,
		14, 191, 192,
		192, 191, 190,
		192, 190, 193,
		193, 190, 189,
		193, 189, 194,
		194, 189, 188,
		194, 188, 195,
		195, 188, 187,
		195, 187, 196,
		196, 187, 197,
		187, 186, 197,
		197, 186, 185,
		197, 185, 198,
		198, 185, 184,
		198, 184, 199,
		199, 184, 183,
		199, 183, 200,
		200, 183, 182,
		200, 182, 201,
		201, 182, 202,
		182, 181, 202,
		202, 181, 180,
		202, 180, 203,
		203, 180, 179,
		203, 179, 204,
		204, 179, 16,
		204, 16, 15,
		205, 204, 15,
		205, 15, 12,
		206, 203, 204,
		206, 204, 205,
		207, 202, 203,
		207, 203, 206,
		208, 201, 202,
		208, 202, 207,
		209, 200, 201,
		209, 201, 208,
		210, 199, 200,
		210, 200, 209,
		211, 198, 199,
		211, 199, 210,
		212, 197, 198,
		212, 198, 211,
		213, 196, 197,
		213, 197, 212,
		214, 195, 196,
		214, 196, 213,
		215, 194, 195,
		215, 195, 214,
		216, 193, 194,
		216, 194, 215,
		217, 192, 193,
		217, 193, 216,
		13, 14, 192,
		13, 192, 217,
		10, 13, 217,
		10, 217, 218,
		218, 217, 216,
		218, 216, 219,
		219, 216, 215,
		219, 215, 220,
		220, 215, 214,
		220, 214, 221,
		221, 214, 213,
		221, 213, 222,
		222, 213, 212,
		222, 212, 223,
		223, 212, 211,
		223, 211, 224,
		224, 211, 210,
		224, 210, 225,
		225, 210, 209,
		225, 209, 226,
		226, 209, 208,
		226, 208, 227,
		227, 208, 207,
		227, 207, 228,
		228, 207, 206,
		228, 206, 229,
		229, 206, 205,
		229, 205, 230,
		230, 205, 12,
		230, 12, 11,
		231, 230, 11,
		231, 11, 6,
		232, 229, 230,
		232, 230, 231,
		233, 228, 229,
		233, 229, 232,
		234, 227, 228,
		234, 228, 233,
		235, 226, 227,
		235, 227, 234,
		236, 225, 226,
		236, 226, 235,
		237, 224, 225,
		237, 225, 236,
		238, 223, 224,
		238, 224, 237,
		239, 222, 223,
		239, 223, 238,
		240, 221, 222,
		240, 222, 239,
		241, 220, 221,
		241, 221, 240,
		242, 219, 220,
		242, 220, 241,
		243, 218, 219,
		243, 219, 242,
		8, 10, 218,
		8, 218, 243,
		9, 8, 243,
		9, 243, 244,
		244, 243, 242,
		244, 242, 245,
		245, 242, 241,
		245, 241, 246,
		246, 241, 240,
		246, 240, 247,
		247, 240, 239,
		247, 239, 248,
		248, 239, 238,
		248, 238, 249,
		249, 238, 237,
		249, 237, 250,
		250, 237, 236,
		250, 236, 251,
		251, 236, 235,
		251, 235, 252,
		252, 235, 234,
		252, 234, 253,
		253, 234, 233,
		253, 233, 254,
		254, 233, 232,
		254, 232, 255,
		255, 232, 231,
		255, 231, 256,
		256, 231, 6,
		256, 6, 4,
		4, 3, 61,
		4, 61, 256,
		59, 255, 256,
		59, 256, 61,
		58, 254, 255,
		58, 255, 59,
		55, 253, 254,
		55, 254, 58,
		53, 252, 253,
		53, 253, 55,
		51, 251, 252,
		51, 252, 53,
		49, 250, 251,
		49, 251, 51,
		47, 249, 250,
		47, 250, 49,
		45, 248, 47,
		248, 249, 47,
		43, 247, 45,
		247, 248, 45,
		41, 246, 247,
		41, 247, 43,
		39, 245, 41,
		245, 246, 41,
		37, 257, 39,
		257, 245, 39,
		2, 1, 37,
		1, 257, 37,
	};

	// Данные вершин
	SimpleVertex vertices[] = 
	{
		{ D3DXVECTOR3(-0.000000f, 1.000000f, 0.000000f), D3DXVECTOR2(0.022329f, 0.180588f) },
		{ D3DXVECTOR3(0.180240f, 0.980785f, 0.074658f), D3DXVECTOR2(0.024936f, 0.117923f) },
		{ D3DXVECTOR3(0.195090f, 0.980785f, 0.000001f), D3DXVECTOR2(0.054432f, 0.125794f)},
		{ D3DXVECTOR3(0.195090f, -0.980785f, -0.000001f), D3DXVECTOR2(0.488591f, 0.761033f)},
		{ D3DXVECTOR3(0.180240f, -0.980785f, 0.074657f), D3DXVECTOR2(0.505363f, 0.756724f) },
		{ D3DXVECTOR3(0.000000f, -1.000000f, -0.000001f), D3DXVECTOR2(0.506737f, 0.819412f) },
		{ D3DXVECTOR3(0.137950f, -0.980785f, 0.137949f), D3DXVECTOR2(0.522231f, 0.759842f)},
		{ D3DXVECTOR3(-0.000000f, 1.000000f, 0.000000f), D3DXVECTOR2(0.991145f, 0.180588f)},
		{ D3DXVECTOR3(0.137950f, 0.980785f, 0.137950f), D3DXVECTOR2(0.963217f, 0.123676f)},
		{ D3DXVECTOR3(0.180240f, 0.980785f, 0.074658f), D3DXVECTOR2(0.993752f, 0.117923f) },
		{ D3DXVECTOR3(0.074658f, 0.980785f, 0.180240f), D3DXVECTOR2(0.942623f, 0.140744f)},
		{ D3DXVECTOR3(0.074658f, -0.980785f, 0.180239f), D3DXVECTOR2(0.537993f, 0.770133f)},
		{ D3DXVECTOR3(-0.000000f, -0.980785f, 0.195090f), D3DXVECTOR2(0.551332f, 0.786739f)},
		{ D3DXVECTOR3(-0.000000f, 0.980785f, 0.195091f), D3DXVECTOR2(0.934533f, 0.163795f)},
		{ D3DXVECTOR3(-0.074658f, 0.980785f, 0.180240f), D3DXVECTOR2(0.936278f, 0.188038f)},
		{ D3DXVECTOR3(-0.074658f, -0.980785f, 0.180239f), D3DXVECTOR2(0.560622f, 0.808182f)},
		{ D3DXVECTOR3(-0.137950f, -0.980785f, 0.137949f), D3DXVECTOR2(0.563644f, 0.832267f) },
		{ D3DXVECTOR3(-0.137950f, 0.980785f, 0.137950f), D3DXVECTOR2(0.944726f, 0.210078f) },
		{ D3DXVECTOR3(-0.180240f, 0.980785f, 0.074658f), D3DXVECTOR2(0.957533f, 0.227582f) },
		{ D3DXVECTOR3(-0.180240f, -0.980785f, 0.074657f), D3DXVECTOR2(0.557370f, 0.855796f) },
		{ D3DXVECTOR3(-0.195090f, -0.980785f, -0.000001f), D3DXVECTOR2(0.538840f, 0.874206f) },
		{ D3DXVECTOR3(-0.195090f, 0.980785f, 0.000001f), D3DXVECTOR2(0.972999f, 0.238967f)},
		{ D3DXVECTOR3(-0.180240f, 0.980785f, -0.074657f), D3DXVECTOR2(0.020955f, 0.243276f)},
		{ D3DXVECTOR3(-0.195090f, 0.980785f, 0.000001f), D3DXVECTOR2(0.004183f, 0.238967f)   },
		{ D3DXVECTOR3(-0.180240f, -0.980785f, -0.074658f), D3DXVECTOR2(0.509344f, 0.882077f) },
		{ D3DXVECTOR3(-0.137950f, -0.980785f, -0.137950f), D3DXVECTOR2(0.478809f, 0.876324f) },
		{ D3DXVECTOR3(-0.137949f, 0.980785f, -0.137949f), D3DXVECTOR2(0.037823f, 0.240158f) },
		{ D3DXVECTOR3(-0.074658f, 0.980785f, -0.180239f), D3DXVECTOR2(0.053585f, 0.229867f) },
		{ D3DXVECTOR3(-0.074658f, -0.980785f, -0.180241f), D3DXVECTOR2(0.458215f, 0.859256f) },
		{ D3DXVECTOR3(0.000000f, -0.980785f, -0.195091f), D3DXVECTOR2(0.450125f, 0.836205f) },
		{ D3DXVECTOR3(0.000000f, 0.980785f, -0.195089f), D3DXVECTOR2(0.066924f, 0.213261f) },
		{ D3DXVECTOR3(0.074658f, 0.980785f, -0.180239f), D3DXVECTOR2(0.076214f, 0.191818f) },
		{ D3DXVECTOR3(0.074658f, -0.980785f, -0.180240f), D3DXVECTOR2(0.451870f, 0.811962f) },
		{ D3DXVECTOR3(0.137950f, -0.980785f, -0.137950f), D3DXVECTOR2(0.460318f, 0.789922f) },
		{ D3DXVECTOR3(0.137949f, 0.980785f, -0.137949f), D3DXVECTOR2(0.079236f, 0.167733f) },
		{ D3DXVECTOR3(0.180240f, 0.980785f, -0.074657f), D3DXVECTOR2(0.072963f, 0.144204f) },
		{ D3DXVECTOR3(0.180240f, -0.980785f, -0.074658f), D3DXVECTOR2(0.473125f, 0.772418f) },
		{ D3DXVECTOR3(0.382683f, 0.923880f, 0.000001f), D3DXVECTOR2(0.123141f, 0.082010f)},
		{ D3DXVECTOR3(0.353553f, 0.923880f, -0.146446f), D3DXVECTOR2(0.143514f, 0.127794f) },
		{ D3DXVECTOR3(0.555570f, 0.831470f, 0.000001f), D3DXVECTOR2(0.248980f, 0.072409f)},
		{ D3DXVECTOR3(0.513280f, 0.831470f, -0.212607f), D3DXVECTOR2(0.216910f, 0.138584f) },
		{ D3DXVECTOR3(0.707106f, 0.707107f, 0.000001f), D3DXVECTOR2(0.342106f, 0.106513f)},
		{ D3DXVECTOR3(0.653281f, 0.707107f, -0.270597f), D3DXVECTOR2(0.272062f, 0.171550f) },
		{ D3DXVECTOR3(0.831469f, 0.555570f, 0.000000f), D3DXVECTOR2(0.384522f, 0.158479f) },
		{ D3DXVECTOR3(0.768178f, 0.555570f, -0.318189f), D3DXVECTOR2(0.308725f, 0.216835f) },
		{ D3DXVECTOR3(0.923879f, 0.382683f, 0.000000f), D3DXVECTOR2(0.406706f, 0.215846f)},
		{ D3DXVECTOR3(0.853553f, 0.382684f, -0.353553f), D3DXVECTOR2(0.333897f, 0.268246f) },
		{ D3DXVECTOR3(0.980785f, 0.195090f, 0.000000f), D3DXVECTOR2(0.420663f, 0.275254f)},
		{ D3DXVECTOR3(0.906127f, 0.195090f, -0.375330f), D3DXVECTOR2(0.352578f, 0.322803f) },
		{ D3DXVECTOR3(0.999999f, -0.000000f, 0.000000f), D3DXVECTOR2(0.430754f, 0.335596f)},
		{ D3DXVECTOR3(0.923879f, 0.000000f, -0.382683f), D3DXVECTOR2(0.367606f, 0.379049f) },
		{ D3DXVECTOR3(0.980785f, -0.195090f, -0.000000f), D3DXVECTOR2(0.438868f, 0.396409f) },
		{ D3DXVECTOR3(0.906127f, -0.195090f, -0.375330f), D3DXVECTOR2(0.380634f, 0.436199f) },
		{ D3DXVECTOR3(0.923879f, -0.382683f, -0.000000f), D3DXVECTOR2(0.445994f, 0.457457f)},
		{ D3DXVECTOR3(0.853553f, -0.382683f, -0.353553f), D3DXVECTOR2(0.392739f, 0.493761f)},
		{ D3DXVECTOR3(0.831469f, -0.555570f, -0.000000f), D3DXVECTOR2(0.452759f, 0.518590f)},
		{ D3DXVECTOR3(0.768178f, -0.555570f, -0.318190f), D3DXVECTOR2(0.404758f, 0.551361f)},
		{ D3DXVECTOR3(0.653281f, -0.707107f, -0.270598f), D3DXVECTOR2(0.417507f, 0.608635f)},
		{ D3DXVECTOR3(0.707106f, -0.707107f, -0.000000f), D3DXVECTOR2(0.459679f, 0.579687f) },
		{ D3DXVECTOR3(0.555570f, -0.831470f, -0.000001f), D3DXVECTOR2(0.467316f, 0.640614f)},
		{ D3DXVECTOR3(0.513280f, -0.831469f, -0.212608f), D3DXVECTOR2(0.431988f, 0.665130f)},
		{ D3DXVECTOR3(0.382683f, -0.923880f, -0.000001f), D3DXVECTOR2(0.476475f, 0.701179f)},
		{ D3DXVECTOR3(0.353553f, -0.923879f, -0.146447f), D3DXVECTOR2(0.449691f, 0.720145f)},
		{ D3DXVECTOR3(0.270598f, -0.923879f, -0.270599f), D3DXVECTOR2(0.425216f, 0.749641f)},
		{ D3DXVECTOR3(0.392847f, -0.831469f, -0.392848f), D3DXVECTOR2(0.398462f, 0.703010f)},
		{ D3DXVECTOR3(0.500000f, -0.707106f, -0.500000f), D3DXVECTOR2(0.377114f, 0.652706f)},
		{ D3DXVECTOR3(0.587938f, -0.555570f, -0.587938f), D3DXVECTOR2(0.359069f, 0.600286f)},
		{ D3DXVECTOR3(0.653281f, -0.382683f, -0.653282f), D3DXVECTOR2(0.342881f, 0.546714f)},
		{ D3DXVECTOR3(0.693520f, -0.195090f, -0.693520f), D3DXVECTOR2(0.327484f, 0.492660f) },
		{ D3DXVECTOR3(0.707106f, 0.000000f, -0.707106f), D3DXVECTOR2(0.311965f, 0.438680f)},
		{ D3DXVECTOR3(0.693520f, 0.195091f, -0.693519f), D3DXVECTOR2(0.295390f, 0.385346f)},
		{ D3DXVECTOR3(0.653281f, 0.382684f, -0.653281f), D3DXVECTOR2(0.276614f, 0.333387f)},
		{ D3DXVECTOR3(0.587938f, 0.555570f, -0.587937f), D3DXVECTOR2(0.254042f, 0.283889f)},
		{ D3DXVECTOR3(0.500000f, 0.707107f, -0.499999f), D3DXVECTOR2(0.225346f, 0.238654f)},
		{ D3DXVECTOR3(0.392847f, 0.831470f, -0.392847f), D3DXVECTOR2(0.187410f, 0.200778f)},
		{ D3DXVECTOR3(0.270598f, 0.923880f, -0.270597f), D3DXVECTOR2(0.137759f, 0.175217f)},
		{ D3DXVECTOR3(0.146446f, 0.923880f, -0.353553f), D3DXVECTOR2(0.121648f, 0.218857f)},
		{ D3DXVECTOR3(0.212607f, 0.831470f, -0.513279f), D3DXVECTOR2(0.157202f, 0.256712f)},
		{ D3DXVECTOR3(0.270598f, 0.707107f, -0.653281f), D3DXVECTOR2(0.184977f, 0.301236f)},
		{ D3DXVECTOR3(0.318190f, 0.555571f, -0.768177f), D3DXVECTOR2(0.207484f, 0.349747f)},
		{ D3DXVECTOR3(0.353553f, 0.382684f, -0.853553f), D3DXVECTOR2(0.226676f, 0.400603f)},
		{ D3DXVECTOR3(0.375330f, 0.195091f, -0.906127f), D3DXVECTOR2(0.243963f, 0.452758f)},
		{ D3DXVECTOR3(0.382683f, 0.000001f, -0.923879f), D3DXVECTOR2(0.260419f, 0.505470f)},
		{ D3DXVECTOR3(0.375330f, -0.195090f, -0.906127f), D3DXVECTOR2(0.276969f, 0.558119f) },
		{ D3DXVECTOR3(0.353553f, -0.382683f, -0.853553f), D3DXVECTOR2(0.294554f, 0.610073f) },
		{ D3DXVECTOR3(0.318190f, -0.555570f, -0.768178f), D3DXVECTOR2(0.314302f, 0.660544f) },
		{ D3DXVECTOR3(0.270598f, -0.707106f, -0.653282f), D3DXVECTOR2(0.337720f, 0.708390f) },
		{ D3DXVECTOR3(0.212608f, -0.831469f, -0.513281f), D3DXVECTOR2(0.366889f, 0.751796f) },
		{ D3DXVECTOR3(0.146447f, -0.923879f, -0.353554f), D3DXVECTOR2(0.404373f, 0.787800f) },
		{ D3DXVECTOR3(0.000000f, -0.923879f, -0.382684f), D3DXVECTOR2(0.389467f, 0.832278f)},
		{ D3DXVECTOR3(0.000000f, -0.831469f, -0.555571f), D3DXVECTOR2(0.336884f, 0.808903f)},
		{ D3DXVECTOR3(0.000000f, -0.707106f, -0.707107f), D3DXVECTOR2(0.296831f, 0.771994f) },
		{ D3DXVECTOR3(0.000000f, -0.555570f, -0.831470f), D3DXVECTOR2(0.266980f, 0.727041f)},
		{ D3DXVECTOR3(0.000000f, -0.382683f, -0.923880f), D3DXVECTOR2(0.243889f, 0.677492f)},
		{ D3DXVECTOR3(0.000000f, -0.195090f, -0.980785f), D3DXVECTOR2(0.224976f, 0.625310f)},
		{ D3DXVECTOR3(0.000000f, 0.000001f, -1.000000f), D3DXVECTOR2(0.208505f, 0.571651f)},
		{ D3DXVECTOR3(0.000000f, 0.195091f, -0.980785f), D3DXVECTOR2(0.193268f, 0.517260f)},
		{ D3DXVECTOR3(0.000000f, 0.382684f, -0.923879f), D3DXVECTOR2(0.178312f, 0.462705f)},
		{ D3DXVECTOR3(0.000000f, 0.555571f, -0.831469f), D3DXVECTOR2(0.162741f, 0.408511f)},
		{ D3DXVECTOR3(0.000000f, 0.707107f, -0.707106f), D3DXVECTOR2(0.145534f, 0.355292f)},
		{ D3DXVECTOR3(0.000000f, 0.831470f, -0.555569f), D3DXVECTOR2(0.125325f, 0.303912f)},
		{ D3DXVECTOR3(-0.000000f, 0.923880f, -0.382683f), D3DXVECTOR2(0.100104f, 0.255763f)},
		{ D3DXVECTOR3(-0.146447f, 0.923880f, -0.353553f), D3DXVECTOR2(0.075177f, 0.283673f) },
		{ D3DXVECTOR3(-0.212607f, 0.831470f, -0.513279f), D3DXVECTOR2(0.091484f, 0.339792f) },
		{ D3DXVECTOR3(-0.270598f, 0.707107f, -0.653281f), D3DXVECTOR2(0.104872f, 0.397148f) },
		{ D3DXVECTOR3(-0.318190f, 0.555571f, -0.768177f), D3DXVECTOR2(0.116724f, 0.455145f) },
		{ D3DXVECTOR3(-0.353553f, 0.382684f, -0.853553f), D3DXVECTOR2(0.127976f, 0.513389f) },
		{ D3DXVECTOR3(-0.375330f, 0.195091f, -0.906127f), D3DXVECTOR2(0.139403f, 0.571561f) },
		{ D3DXVECTOR3(-0.382683f, 0.000001f, -0.923879f), D3DXVECTOR2(0.151826f, 0.629321f) },
		{ D3DXVECTOR3(-0.375330f, -0.195090f, -0.906127f), D3DXVECTOR2(0.166341f, 0.686203f)},
		{ D3DXVECTOR3(-0.353553f, -0.382683f, -0.853553f), D3DXVECTOR2(0.184693f, 0.741439f)},
		{ D3DXVECTOR3(-0.318190f, -0.555570f, -0.768178f), D3DXVECTOR2(0.210006f, 0.793550f)},
		{ D3DXVECTOR3(-0.270598f, -0.707106f, -0.653282f), D3DXVECTOR2(0.248067f, 0.839357f)},
		{ D3DXVECTOR3(-0.212608f, -0.831469f, -0.513281f), D3DXVECTOR2(0.307321f, 0.871890f)},
		{ D3DXVECTOR3(-0.146447f, -0.923879f, -0.353554f), D3DXVECTOR2(0.386344f, 0.879930f)},
		{ D3DXVECTOR3(-0.270598f, -0.923879f, -0.270599f), D3DXVECTOR2(0.414321f, 0.924415f)},
		{ D3DXVECTOR3(-0.392847f, -0.831469f, -0.392848f), D3DXVECTOR2(0.273802f, 0.938496f)},
		{ D3DXVECTOR3(-0.500000f, -0.707106f, -0.500000f), D3DXVECTOR2(0.170427f, 0.902779f)},
		{ D3DXVECTOR3(-0.587938f, -0.555570f, -0.587938f), D3DXVECTOR2(0.129016f, 0.848918f)},
		{ D3DXVECTOR3(-0.653281f, -0.382683f, -0.653282f), D3DXVECTOR2(0.108661f, 0.790372f)},
		{ D3DXVECTOR3(-0.693520f, -0.195090f, -0.693520f), D3DXVECTOR2(0.096214f, 0.730171f)},
		{ D3DXVECTOR3(-0.707107f, 0.000000f, -0.707107f), D3DXVECTOR2(0.087356f, 0.669235f)},
		{ D3DXVECTOR3(-0.693520f, 0.195091f, -0.693520f), D3DXVECTOR2(0.080302f, 0.607933f)},
		{ D3DXVECTOR3(-0.653281f, 0.382684f, -0.653281f), D3DXVECTOR2(0.074152f, 0.546448f)},
		{ D3DXVECTOR3(-0.587938f, 0.555570f, -0.587937f), D3DXVECTOR2(0.068343f, 0.484895f)},
		{ D3DXVECTOR3(-0.500000f, 0.707107f, -0.499999f), D3DXVECTOR2(0.062425f, 0.423364f)},
		{ D3DXVECTOR3(-0.392847f, 0.831470f, -0.392847f), D3DXVECTOR2(0.055916f, 0.361952f)},
		{ D3DXVECTOR3(-0.270598f, 0.923880f, -0.270597f), D3DXVECTOR2(0.048125f, 0.300799f)},
		{ D3DXVECTOR3(-0.353553f, 0.923880f, -0.146446f), D3DXVECTOR2(0.020051f, 0.305972f)},
		{ D3DXVECTOR3(-0.513280f, 0.831470f, -0.212607f), D3DXVECTOR2(0.019367f, 0.368671f)},
		{ D3DXVECTOR3(-0.653281f, 0.707107f, -0.270598f), D3DXVECTOR2(0.018791f, 0.431373f)},
		{ D3DXVECTOR3(-0.768178f, 0.555570f, -0.318189f), D3DXVECTOR2(0.018264f, 0.494076f)},
		{ D3DXVECTOR3(-0.853553f, 0.382684f, -0.353553f), D3DXVECTOR2(0.017740f, 0.556778f)},
		{ D3DXVECTOR3(-0.906127f, 0.195090f, -0.375330f), D3DXVECTOR2(0.017178f, 0.619480f)},
		{ D3DXVECTOR3(-0.923879f, 0.000000f, -0.382683f), D3DXVECTOR2(0.016521f, 0.682180f)},
		{ D3DXVECTOR3(-0.906127f, -0.195090f, -0.375330f), D3DXVECTOR2(0.015671f, 0.744877f) },
		{ D3DXVECTOR3(-0.853553f, -0.382683f, -0.353554f), D3DXVECTOR2(0.014418f, 0.807567f) },
		{ D3DXVECTOR3(-0.768178f, -0.555570f, -0.318190f), D3DXVECTOR2(0.012163f, 0.870238f) },
		{ D3DXVECTOR3(-0.653281f, -0.707107f, -0.270598f), D3DXVECTOR2(0.006142f, 0.932843f) },
		{ D3DXVECTOR3(-0.653281f, -0.707107f, -0.270598f), D3DXVECTOR2(0.974958f, 0.932843f) },
		{ D3DXVECTOR3(-0.392847f, -0.831469f, -0.392848f), D3DXVECTOR2(0.958949f, 0.973816f) },
		{ D3DXVECTOR3(-0.513280f, -0.831469f, -0.212608f), D3DXVECTOR2(0.872099f, 0.993631f) },
		{ D3DXVECTOR3(-0.353553f, -0.923879f, -0.146447f), D3DXVECTOR2(0.517273f, 0.944648f) },
		{ D3DXVECTOR3(-0.382683f, -0.923880f, -0.000001f), D3DXVECTOR2(0.607549f, 0.917990f)},
		{ D3DXVECTOR3(-0.555570f, -0.831470f, -0.000001f), D3DXVECTOR2(0.733388f, 0.927591f)},
		{ D3DXVECTOR3(-0.707107f, -0.707107f, -0.000001f), D3DXVECTOR2(0.826514f, 0.893488f) },
		{ D3DXVECTOR3(-0.831469f, -0.555570f, -0.000000f), D3DXVECTOR2(0.868930f, 0.841521f)},
		{ D3DXVECTOR3(-0.768178f, -0.555570f, -0.318190f), D3DXVECTOR2(0.980979f, 0.870238f) },
		{ D3DXVECTOR3(-0.923879f, -0.382683f, -0.000000f), D3DXVECTOR2(0.891114f, 0.784154f)},
		{ D3DXVECTOR3(-0.853553f, -0.382683f, -0.353554f), D3DXVECTOR2(0.983234f, 0.807567f) },
		{ D3DXVECTOR3(-0.980785f, -0.195090f, -0.000000f), D3DXVECTOR2(0.905071f, 0.724746f) },
		{ D3DXVECTOR3(-0.906127f, -0.195090f, -0.375330f), D3DXVECTOR2(0.984486f, 0.744877f) },
		{ D3DXVECTOR3(-1.000000f, -0.000000f, -0.000000f), D3DXVECTOR2(0.915162f, 0.664404f) },
		{ D3DXVECTOR3(-0.923879f, 0.000000f, -0.382683f), D3DXVECTOR2(0.985336f, 0.682180f) },
		{ D3DXVECTOR3(-0.980785f, 0.195090f, 0.000000f), D3DXVECTOR2(0.923276f, 0.603591f)  },
		{ D3DXVECTOR3(-0.906127f, 0.195090f, -0.375330f), D3DXVECTOR2(0.985994f, 0.619480f) },
		{ D3DXVECTOR3(-0.923879f, 0.382683f, 0.000000f), D3DXVECTOR2(0.930402f, 0.542543f) },
		{ D3DXVECTOR3(-0.853553f, 0.382684f, -0.353553f), D3DXVECTOR2(0.986556f, 0.556778f) },
		{ D3DXVECTOR3(-0.831469f, 0.555570f, 0.000000f), D3DXVECTOR2(0.937167f, 0.481410f)  },
		{ D3DXVECTOR3(-0.768178f, 0.555570f, -0.318189f), D3DXVECTOR2(0.987080f, 0.494076f) },
		{ D3DXVECTOR3(-0.707107f, 0.707107f, 0.000000f), D3DXVECTOR2(0.944087f, 0.420313f)  },
		{ D3DXVECTOR3(-0.653281f, 0.707107f, -0.270598f), D3DXVECTOR2(0.987607f, 0.431373f) },
		{ D3DXVECTOR3(-0.555570f, 0.831470f, 0.000001f), D3DXVECTOR2(0.951724f, 0.359386f)  },
		{ D3DXVECTOR3(-0.513280f, 0.831470f, -0.212607f), D3DXVECTOR2(0.988182f, 0.368671f) },
		{ D3DXVECTOR3(-0.382683f, 0.923880f, 0.000001f), D3DXVECTOR2(0.960883f, 0.298821f)  },
		{ D3DXVECTOR3(-0.353553f, 0.923880f, -0.146446f), D3DXVECTOR2(0.988867f, 0.305972f) },
		{ D3DXVECTOR3(-0.353553f, 0.923880f, 0.146447f), D3DXVECTOR2(0.934099f, 0.279855f) },
		{ D3DXVECTOR3(-0.513280f, 0.831470f, 0.212608f), D3DXVECTOR2(0.916396f, 0.334870f)},
		{ D3DXVECTOR3(-0.653281f, 0.707107f, 0.270598f), D3DXVECTOR2(0.901915f, 0.391365f) },
		{ D3DXVECTOR3(-0.768178f, 0.555570f, 0.318190f), D3DXVECTOR2(0.889166f, 0.448639f) },
		{ D3DXVECTOR3(-0.853553f, 0.382683f, 0.353554f), D3DXVECTOR2(0.877147f, 0.506239f) },
		{ D3DXVECTOR3(-0.906127f, 0.195090f, 0.375330f), D3DXVECTOR2(0.865042f, 0.563801f) },
		{ D3DXVECTOR3(-0.923879f, -0.000000f, 0.382683f), D3DXVECTOR2(0.852014f, 0.620951f)},
		{ D3DXVECTOR3(-0.906127f, -0.195091f, 0.375330f), D3DXVECTOR2(0.836986f, 0.677197f) },
		{ D3DXVECTOR3(-0.853553f, -0.382684f, 0.353553f), D3DXVECTOR2(0.818305f, 0.731754f) },
		{ D3DXVECTOR3(-0.768178f, -0.555570f, 0.318189f), D3DXVECTOR2(0.793133f, 0.783166f) },
		{ D3DXVECTOR3(-0.653281f, -0.707107f, 0.270597f), D3DXVECTOR2(0.756470f, 0.828451f) },
		{ D3DXVECTOR3(-0.513280f, -0.831470f, 0.212607f), D3DXVECTOR2(0.701317f, 0.861416f) },
		{ D3DXVECTOR3(-0.353553f, -0.923880f, 0.146446f), D3DXVECTOR2(0.627922f, 0.872206f) },
		{ D3DXVECTOR3(-0.270598f, -0.923880f, 0.270597f), D3DXVECTOR2(0.622167f, 0.824783f) },
		{ D3DXVECTOR3(-0.392847f, -0.831470f, 0.392847f), D3DXVECTOR2(0.671818f, 0.799222f) },
		{ D3DXVECTOR3(-0.500000f, -0.707107f, 0.499999f), D3DXVECTOR2(0.709754f, 0.761346f) },
		{ D3DXVECTOR3(-0.587938f, -0.555571f, 0.587937f), D3DXVECTOR2(0.738450f, 0.716111f) },
		{ D3DXVECTOR3(-0.653281f, -0.382684f, 0.653281f), D3DXVECTOR2(0.761022f, 0.666613f) },
		{ D3DXVECTOR3(-0.693520f, -0.195091f, 0.693520f), D3DXVECTOR2(0.779798f, 0.614654f) },
		{ D3DXVECTOR3(-0.707107f, -0.000001f, 0.707107f), D3DXVECTOR2(0.796373f, 0.561321f) },
		{ D3DXVECTOR3(-0.693520f, 0.195090f, 0.693520f), D3DXVECTOR2(0.811892f, 0.507340f)},
		{ D3DXVECTOR3(-0.653281f, 0.382683f, 0.653282f), D3DXVECTOR2(0.827289f, 0.453286f)},
		{ D3DXVECTOR3(-0.587938f, 0.555570f, 0.587938f), D3DXVECTOR2(0.843477f, 0.399714f)},
		{ D3DXVECTOR3(-0.500000f, 0.707107f, 0.500000f), D3DXVECTOR2(0.861522f, 0.347294f)},
		{ D3DXVECTOR3(-0.392847f, 0.831469f, 0.392848f), D3DXVECTOR2(0.882870f, 0.296989f)},
		{ D3DXVECTOR3(-0.270598f, 0.923879f, 0.270599f), D3DXVECTOR2(0.909624f, 0.250359f)},
		{ D3DXVECTOR3(-0.146447f, 0.923879f, 0.353554f), D3DXVECTOR2(0.888781f, 0.212200f)},
		{ D3DXVECTOR3(-0.212607f, 0.831469f, 0.513280f), D3DXVECTOR2(0.851297f, 0.248204f)},
		{ D3DXVECTOR3(-0.270598f, 0.707106f, 0.653282f), D3DXVECTOR2(0.822128f, 0.291610f)},
		{ D3DXVECTOR3(-0.318190f, 0.555570f, 0.768178f), D3DXVECTOR2(0.798710f, 0.339456f)},
		{ D3DXVECTOR3(-0.353553f, 0.382683f, 0.853554f), D3DXVECTOR2(0.778962f, 0.389927f)},
		{ D3DXVECTOR3(-0.375330f, 0.195090f, 0.906127f), D3DXVECTOR2(0.761377f, 0.441881f)},
		{ D3DXVECTOR3(-0.382683f, -0.000001f, 0.923879f), D3DXVECTOR2(0.744827f, 0.494530f)},
		{ D3DXVECTOR3(-0.375330f, -0.195091f, 0.906127f), D3DXVECTOR2(0.728371f, 0.547242f) },
		{ D3DXVECTOR3(-0.353553f, -0.382684f, 0.853553f), D3DXVECTOR2(0.711083f, 0.599397f) },
		{ D3DXVECTOR3(-0.318190f, -0.555571f, 0.768177f), D3DXVECTOR2(0.691892f, 0.650253f) },
		{ D3DXVECTOR3(-0.270598f, -0.707107f, 0.653281f), D3DXVECTOR2(0.669385f, 0.698764f) },
		{ D3DXVECTOR3(-0.212608f, -0.831470f, 0.513279f), D3DXVECTOR2(0.641610f, 0.743288f) },
		{ D3DXVECTOR3(-0.146447f, -0.923880f, 0.353553f), D3DXVECTOR2(0.606056f, 0.781143f) },
		{ D3DXVECTOR3(-0.000000f, -0.923880f, 0.382683f), D3DXVECTOR2(0.584512f, 0.744237f) },
		{ D3DXVECTOR3(-0.000000f, -0.831470f, 0.555570f), D3DXVECTOR2(0.609733f, 0.696088f) },
		{ D3DXVECTOR3(-0.000000f, -0.707107f, 0.707106f), D3DXVECTOR2(0.629942f, 0.644708f) },
		{ D3DXVECTOR3(-0.000000f, -0.555571f, 0.831469f), D3DXVECTOR2(0.647149f, 0.591489f) },
		{ D3DXVECTOR3(-0.000000f, -0.382684f, 0.923879f), D3DXVECTOR2(0.662720f, 0.537295f) },
		{ D3DXVECTOR3(-0.000000f, -0.195091f, 0.980785f), D3DXVECTOR2(0.677676f, 0.482740f) },
		{ D3DXVECTOR3(-0.000000f, -0.000001f, 1.000000f), D3DXVECTOR2(0.692913f, 0.428349f) },
		{ D3DXVECTOR3(-0.000000f, 0.195090f, 0.980785f), D3DXVECTOR2(0.709384f, 0.374690f) },
		{ D3DXVECTOR3(0.000000f, 0.382683f, 0.923880f), D3DXVECTOR2(0.728297f, 0.322508f)  },
		{ D3DXVECTOR3(-0.000000f, 0.555570f, 0.831470f), D3DXVECTOR2(0.751388f, 0.272959f) },
		{ D3DXVECTOR3(-0.000000f, 0.707106f, 0.707107f), D3DXVECTOR2(0.781239f, 0.228006f) },
		{ D3DXVECTOR3(0.000000f, 0.831469f, 0.555571f), D3DXVECTOR2(0.821292f, 0.191097f)  },
		{ D3DXVECTOR3(-0.000000f, 0.923879f, 0.382684f), D3DXVECTOR2(0.873875f, 0.167721f) },
		{ D3DXVECTOR3(0.146447f, 0.923879f, 0.353554f), D3DXVECTOR2(0.870752f, 0.120070f) },
		{ D3DXVECTOR3(0.212607f, 0.831469f, 0.513280f), D3DXVECTOR2(0.791728f, 0.128110f) },
		{ D3DXVECTOR3(0.270598f, 0.707106f, 0.653282f), D3DXVECTOR2(0.732475f, 0.160642f) },
		{ D3DXVECTOR3(0.318190f, 0.555570f, 0.768178f), D3DXVECTOR2(0.694414f, 0.206450f)},
		{ D3DXVECTOR3(0.353553f, 0.382683f, 0.853554f), D3DXVECTOR2(0.669101f, 0.258561f)},
		{ D3DXVECTOR3(0.375330f, 0.195090f, 0.906128f), D3DXVECTOR2(0.650749f, 0.313797f)},
		{ D3DXVECTOR3(0.382683f, -0.000001f, 0.923879f), D3DXVECTOR2(0.636234f, 0.370680f) },
		{ D3DXVECTOR3(0.375330f, -0.195091f, 0.906127f), D3DXVECTOR2(0.623811f, 0.428439f) },
		{ D3DXVECTOR3(0.353553f, -0.382684f, 0.853553f), D3DXVECTOR2(0.612384f, 0.486611f) },
		{ D3DXVECTOR3(0.318190f, -0.555571f, 0.768177f), D3DXVECTOR2(0.601132f, 0.544855f) },
		{ D3DXVECTOR3(0.270598f, -0.707107f, 0.653281f), D3DXVECTOR2(0.589280f, 0.602852f) },
		{ D3DXVECTOR3(0.212608f, -0.831470f, 0.513279f), D3DXVECTOR2(0.575892f, 0.660208f) },
		{ D3DXVECTOR3(0.146447f, -0.923880f, 0.353553f), D3DXVECTOR2(0.559585f, 0.716327f) },
		{ D3DXVECTOR3(0.270598f, -0.923880f, 0.270597f), D3DXVECTOR2(0.532533f, 0.699201f) },
		{ D3DXVECTOR3(0.392847f, -0.831470f, 0.392847f), D3DXVECTOR2(0.540323f, 0.638048f) },
		{ D3DXVECTOR3(0.500000f, -0.707107f, 0.500000f), D3DXVECTOR2(0.546833f, 0.576636f) },
		{ D3DXVECTOR3(0.587938f, -0.555571f, 0.587937f), D3DXVECTOR2(0.552750f, 0.515105f) },
		{ D3DXVECTOR3(0.653281f, -0.382684f, 0.653281f), D3DXVECTOR2(0.558559f, 0.453552f) },
		{ D3DXVECTOR3(0.693520f, -0.195091f, 0.693520f), D3DXVECTOR2(0.564710f, 0.392067f) },
		{ D3DXVECTOR3(0.707107f, -0.000001f, 0.707107f), D3DXVECTOR2(0.571764f, 0.330765f)},
		{ D3DXVECTOR3(0.693520f, 0.195090f, 0.693520f), D3DXVECTOR2(0.580622f, 0.269829f)},
		{ D3DXVECTOR3(0.653282f, 0.382683f, 0.653282f), D3DXVECTOR2(0.593069f, 0.209628f)},
		{ D3DXVECTOR3(0.587938f, 0.555570f, 0.587938f), D3DXVECTOR2(0.613423f, 0.151082f)},
		{ D3DXVECTOR3(0.500000f, 0.707107f, 0.500000f), D3DXVECTOR2(0.654835f, 0.097221f)},
		{ D3DXVECTOR3(0.392847f, 0.831469f, 0.392848f), D3DXVECTOR2(0.758210f, 0.061504f)},
		{ D3DXVECTOR3(0.270598f, 0.923879f, 0.270599f), D3DXVECTOR2(0.898729f, 0.075585f)},
		{ D3DXVECTOR3(0.353553f, 0.923880f, 0.146447f), D3DXVECTOR2(0.987731f, 0.053747f)},
		{ D3DXVECTOR3(0.513280f, 0.831470f, 0.212608f), D3DXVECTOR2(0.387690f, 0.006369f)},
		{ D3DXVECTOR3(0.653281f, 0.707107f, 0.270599f), D3DXVECTOR2(0.490549f, 0.067157f)},
		{ D3DXVECTOR3(0.768178f, 0.555570f, 0.318190f), D3DXVECTOR2(0.496571f, 0.129762f)},
		{ D3DXVECTOR3(0.853553f, 0.382683f, 0.353554f), D3DXVECTOR2(0.498826f, 0.192434f)},
		{ D3DXVECTOR3(0.906127f, 0.195090f, 0.375330f), D3DXVECTOR2(0.500078f, 0.255123f)},
		{ D3DXVECTOR3(0.923880f, -0.000000f, 0.382683f), D3DXVECTOR2(0.500928f, 0.317820f) },
		{ D3DXVECTOR3(0.906127f, -0.195091f, 0.375330f), D3DXVECTOR2(0.501586f, 0.380520f) },
		{ D3DXVECTOR3(0.853553f, -0.382684f, 0.353553f), D3DXVECTOR2(0.502148f, 0.443222f) },
		{ D3DXVECTOR3(0.768178f, -0.555570f, 0.318189f), D3DXVECTOR2(0.502672f, 0.505924f) },
		{ D3DXVECTOR3(0.653281f, -0.707107f, 0.270598f), D3DXVECTOR2(0.503199f, 0.568627f) },
		{ D3DXVECTOR3(0.513280f, -0.831470f, 0.212607f), D3DXVECTOR2(0.503774f, 0.631329f) },
		{ D3DXVECTOR3(0.353553f, -0.923880f, 0.146446f), D3DXVECTOR2(0.504459f, 0.694028f) },
		{ D3DXVECTOR3(0.353553f, 0.923880f, 0.146447f), D3DXVECTOR2(0.032866f, 0.055352f)},

	};

	D3D10_BUFFER_DESC bd;
	bd.Usage = D3D10_USAGE_DEFAULT;
	bd.ByteWidth = sizeof(SimpleVertex)* vcount;
	bd.BindFlags = D3D10_BIND_VERTEX_BUFFER;
	bd.CPUAccessFlags = 0;
	bd.MiscFlags = 0;
	D3D10_SUBRESOURCE_DATA InitData;
	InitData.pSysMem = vertices;
	hr = g_pd3dDevice->CreateBuffer(&bd, &InitData, &g_pVertexBuffer);
	if (FAILED(hr))
		return hr;

	// Связываем буфер вершин с графическим конвейером
	UINT stride = sizeof(SimpleVertex);
	UINT offset = 0;
	g_pd3dDevice->IASetVertexBuffers(0, 1, &g_pVertexBuffer, &stride, &offset);

	bd.Usage = D3D10_USAGE_DEFAULT;
	bd.ByteWidth = sizeof(DWORD)* icount;
	bd.BindFlags = D3D10_BIND_INDEX_BUFFER;
	bd.CPUAccessFlags = 0;
	bd.MiscFlags = 0;
	InitData.pSysMem = indices;
	hr = g_pd3dDevice->CreateBuffer(&bd, &InitData, &g_pIndexBuffer);
	if (FAILED(hr))
		return hr;

	g_pd3dDevice->IASetIndexBuffer(g_pIndexBuffer, DXGI_FORMAT_R32_UINT, 0);

	g_pd3dDevice->IASetPrimitiveTopology(D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST);

	D3DXMatrixIdentity(&g_World);

	D3DXVECTOR3 Eye(0.0f, 2.0f, -5.0f);
	D3DXVECTOR3 At(0.0f, 0.0f, 0.0f);
	D3DXVECTOR3 Up(0.0f, 1.0f, 0.0f);
	D3DXMatrixLookAtLH(&g_View, &Eye, &At, &Up);

	D3DXMatrixPerspectiveFovLH(&g_Projection, (float)D3DX_PI * 0.25f, width / (FLOAT)height, 0.1f, 100.0f);

	return S_OK;
}

//--------------------------------------------------------------------------------------
// Прорисовка трехмерной сцены
//--------------------------------------------------------------------------------------
void RenderScene()
{
	// Счетчик времени
	static float t = 0.0f;
	if (g_driverType == D3D10_DRIVER_TYPE_REFERENCE)
	{
		t += (float)D3DX_PI * 0.0125f;
	}
	else
	{
		static DWORD dwTimeStart = 0;
		DWORD dwTimeCur = GetTickCount();
		if (dwTimeStart == 0)
			dwTimeStart = dwTimeCur;
		t = (dwTimeCur - dwTimeStart) / 1000.0f;
	}


	// Матрица поворота треугольника
	// на угол в зависимости от времени t
	D3DXMatrixRotationY(&g_World, t);

	// Очищаем вторичный буфер
	float ClearColor[4] = { 0.5f, 0.5f, 0.9f, 1.0f }; 
	g_pd3dDevice->ClearRenderTargetView(g_pRenderTargetView, ClearColor);

	// Передаем информацию о матрицах преобразования
	g_pWorldVariable->SetMatrix((float*)&g_World);
	g_pViewVariable->SetMatrix((float*)&g_View);
	g_pProjectionVariable->SetMatrix((float*)&g_Projection);


	// Рисуем нашу сцену
	D3D10_TECHNIQUE_DESC techDesc;
	g_pTechnique->GetDesc(&techDesc);
	for (UINT p = 0; p < techDesc.Passes; ++p)
	{
		g_pTechnique->GetPassByIndex(p)->Apply(0);
		g_pd3dDevice->DrawIndexed(1440, 0, 0);
	}
	// Переключаем буферы
	g_pSwapChain->Present(0, 0);
}
//--------------------------------------------------------------------------------------
// Обработка сообщений
//--------------------------------------------------------------------------------------
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	switch (message)
	{

	case WM_DESTROY:
		PostQuitMessage(0);
		break;

	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}

	return 0;
}

//--------------------------------------------------------------------------------------
// Очищаем память 
//--------------------------------------------------------------------------------------
void Cleanup()
{
	if (g_pd3dDevice) g_pd3dDevice->ClearState();

	if (g_pRenderTargetView) g_pRenderTargetView->Release();
	if (g_pSwapChain) g_pSwapChain->Release();
	if (g_pd3dDevice) g_pd3dDevice->Release();
}

