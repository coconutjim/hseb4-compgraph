//--------------------------------------------------------------------------------------
//  Вращающийся тор с градиентной текстурой
//--------------------------------------------------------------------------------------

#pragma comment(lib, "d3d10.lib") 
#pragma comment(lib, "d3dx10.lib")

#include <windows.h>
#include <d3d10.h>
#include <d3dx10.h>

// Ширина и высота окна
#define WINDOW_WIDTH  800
#define WINDOW_HEIGHT 600

//--------------------------------------------------------------------------------------
// Структуры
//--------------------------------------------------------------------------------------
struct SimpleVertex
{
	D3DXVECTOR3 Pos;
	D3DXVECTOR2 Texcoord;
};

//--------------------------------------------------------------------------------------
// Глобальные переменные
//--------------------------------------------------------------------------------------
HWND        g_hWnd = NULL;
D3D10_DRIVER_TYPE       g_driverType = D3D10_DRIVER_TYPE_NULL;
ID3D10Device*           g_pd3dDevice = NULL;
IDXGISwapChain*         g_pSwapChain = NULL;
ID3D10RenderTargetView* g_pRenderTargetView = NULL;

ID3D10Effect*           g_pEffect = NULL;
ID3D10EffectTechnique*  g_pTechnique = NULL;
ID3D10InputLayout*      g_pVertexLayout = NULL;
ID3D10Buffer*           g_pVertexBuffer = NULL;

ID3D10Buffer*               g_pIndexBuffer = NULL;

ID3D10EffectMatrixVariable* g_pWorldVariable = NULL;
ID3D10EffectMatrixVariable* g_pViewVariable = NULL;
ID3D10EffectMatrixVariable* g_pProjectionVariable = NULL;
ID3D10EffectShaderResourceVariable* g_pTexResource = NULL;

ID3D10ShaderResourceView* g_pShaderResource = NULL;

D3DXMATRIX                  g_World;
D3DXMATRIX                  g_View;
D3DXMATRIX                  g_Projection;

//--------------------------------------------------------------------------------------
// Прототипы функций
//--------------------------------------------------------------------------------------
HRESULT             InitWindow(HINSTANCE hInstance, int nCmdShow);
HRESULT				InitDirect3D10();
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
void                Cleanup();
void                RenderScene();

//--------------------------------------------------------------------------------------
// С этой функции начинается выполнение программы
//--------------------------------------------------------------------------------------
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
	// Создаем окно приложения
	if (FAILED(InitWindow(hInstance, nCmdShow)))
		return 0;
	// Инициализируем Direct3D
	if (FAILED(InitDirect3D10()))
	{
		Cleanup();
		return 0;
	}

	// Цикл обработки сообщений
	MSG msg = { 0 };
	while (WM_QUIT != msg.message)
	{
		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
		else
		{
			RenderScene();
		}

	}

	Cleanup();
	return (int)msg.wParam;
}

//--------------------------------------------------------------------------------------
// Регистрация класса и создание окна
//--------------------------------------------------------------------------------------
HRESULT InitWindow(HINSTANCE hInstance, int nCmdShow)
{
	// Регистрируем класс окна
	WNDCLASSEX wc;
	wc.cbSize = sizeof(WNDCLASSEX);
	wc.style = CS_HREDRAW | CS_VREDRAW;
	wc.lpfnWndProc = WndProc;
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hInstance = hInstance;
	wc.hIcon = NULL;
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	wc.lpszMenuName = NULL;
	wc.lpszClassName = L"SimpleWindowClass";
	wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	if (!RegisterClassEx(&wc))
		return E_FAIL;

	// Создаем окно
	g_hWnd = CreateWindow(
		L"SimpleWindowClass",
		L"DirectX 10: Наложение текстуры",
		WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		WINDOW_WIDTH,
		WINDOW_HEIGHT,
		NULL,
		NULL,
		hInstance,
		NULL);

	// Если не удалось создать окно - выходим из функции
	if (!g_hWnd)
		return E_FAIL;
	// Отображаем окно на экране
	ShowWindow(g_hWnd, nCmdShow);
	UpdateWindow(g_hWnd);

	return S_OK;
}

//--------------------------------------------------------------------------------------
// Инициализация Direct3D
//--------------------------------------------------------------------------------------
HRESULT InitDirect3D10()
{
	HRESULT hr = S_OK;

	// Размеры клиентской области окна
	RECT rc;
	GetClientRect(g_hWnd, &rc);
	UINT width = rc.right - rc.left;
	UINT height = rc.bottom - rc.top;

	// Список возможных типов устройства
	D3D10_DRIVER_TYPE driverTypes[] =
	{
		D3D10_DRIVER_TYPE_HARDWARE,
		D3D10_DRIVER_TYPE_REFERENCE,
	};
	UINT numDriverTypes = sizeof(driverTypes) / sizeof(driverTypes[0]);

	// Заполняем структуру 
	DXGI_SWAP_CHAIN_DESC sd;
	ZeroMemory(&sd, sizeof(sd));
	sd.BufferCount = 1;
	sd.BufferDesc.Width = width;
	sd.BufferDesc.Height = height;
	sd.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
	sd.BufferDesc.RefreshRate.Numerator = 60;
	sd.BufferDesc.RefreshRate.Denominator = 1;
	sd.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;
	sd.OutputWindow = g_hWnd;
	sd.SampleDesc.Count = 1;
	sd.SampleDesc.Quality = 0;
	sd.Windowed = TRUE;

	// Пытаемся создать устройство, проходя по списку
	// как только получилось - выходим из цикла
	for (UINT driverTypeIndex = 0; driverTypeIndex < numDriverTypes; driverTypeIndex++)
	{
		g_driverType = driverTypes[driverTypeIndex];
		hr = D3D10CreateDeviceAndSwapChain(NULL, g_driverType, NULL, 0,
			D3D10_SDK_VERSION, &sd, &g_pSwapChain, &g_pd3dDevice);
		if (SUCCEEDED(hr))
			break;
	}
	if (FAILED(hr))
		return hr;

	// Представление данных для
	// буфера визуализации
	ID3D10Texture2D *pBackBuffer;
	hr = g_pSwapChain->GetBuffer(0, __uuidof(ID3D10Texture2D), (LPVOID*)&pBackBuffer);
	if (FAILED(hr))
		return hr;
	// Создадим представление данных
	hr = g_pd3dDevice->CreateRenderTargetView(pBackBuffer, NULL, &g_pRenderTargetView);
	pBackBuffer->Release();
	if (FAILED(hr))
		return hr;
	// Свяжем буфер визуализации с графическим конвейером
	g_pd3dDevice->OMSetRenderTargets(1, &g_pRenderTargetView, NULL);

	// Настроим область отображения
	D3D10_VIEWPORT vp;
	vp.Width = width;
	vp.Height = height;
	vp.MinDepth = 0.0f;
	vp.MaxDepth = 1.0f;
	vp.TopLeftX = 0;
	vp.TopLeftY = 0;
	g_pd3dDevice->RSSetViewports(1, &vp);

	// Используем наши шейдеры 
	// в файле эффектов cube_texture.fx
	hr = D3DX10CreateEffectFromFile(L"Sphere.fx", NULL, NULL, "fx_4_0", D3D10_SHADER_ENABLE_STRICTNESS, 0,
		g_pd3dDevice, NULL, NULL, &g_pEffect, NULL, NULL);
	if (FAILED(hr))
	{
		MessageBox(NULL, L"Не удается обнаружить файл эффектов (FX). Файл эффектов должен находиться в той же папке, что и исполняемый файл", L"Ошибка", MB_OK);
		return hr;
	}

	// Извлекаем технику отображения
	g_pTechnique = g_pEffect->GetTechniqueByName("RenderTexture");

	D3DX10_IMAGE_INFO InfoFromFile;
	D3DX10_IMAGE_LOAD_INFO LoadImageInfo;

	// Читаем информацию об изображении из файла
	hr = D3DX10GetImageInfoFromFile(L"pic.bmp", NULL, &InfoFromFile, NULL);

	LoadImageInfo.Width = InfoFromFile.Width;
	LoadImageInfo.Height = InfoFromFile.Height;
	LoadImageInfo.Depth = InfoFromFile.Depth;
	LoadImageInfo.FirstMipLevel = 1;
	LoadImageInfo.MipLevels = InfoFromFile.MipLevels;
	LoadImageInfo.Usage = D3D10_USAGE_DEFAULT;
	LoadImageInfo.BindFlags = D3D10_BIND_SHADER_RESOURCE;
	LoadImageInfo.CpuAccessFlags = 0;
	LoadImageInfo.MiscFlags = 0;
	LoadImageInfo.Format = InfoFromFile.Format;
	LoadImageInfo.Filter = D3DX10_FILTER_NONE;
	LoadImageInfo.MipFilter = D3DX10_FILTER_NONE;
	LoadImageInfo.pSrcInfo = &InfoFromFile;

	hr = D3DX10CreateShaderResourceViewFromFile(g_pd3dDevice, L"pic.bmp", &LoadImageInfo, NULL, &g_pShaderResource, NULL);
	if (FAILED(hr))
		return hr;

	// Связь с переменными шейдера
	g_pWorldVariable = g_pEffect->GetVariableByName("World")->AsMatrix();
	g_pViewVariable = g_pEffect->GetVariableByName("View")->AsMatrix();
	g_pProjectionVariable = g_pEffect->GetVariableByName("Projection")->AsMatrix();
	g_pTexResource = g_pEffect->GetVariableByName("g_txDiffuse")->AsShaderResource();

	g_pTexResource->SetResource(g_pShaderResource);

	// Описываем формат входных данных
	D3D10_INPUT_ELEMENT_DESC layout[] =
	{
		{ "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D10_INPUT_PER_VERTEX_DATA, 0 },
		{ "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT, 0, 12, D3D10_INPUT_PER_VERTEX_DATA, 0 }
	};
	UINT numElements = sizeof(layout) / sizeof(layout[0]);

	// Создаем объект входных данных
	D3D10_PASS_DESC PassDesc;
	g_pTechnique->GetPassByIndex(0)->GetDesc(&PassDesc);
	hr = g_pd3dDevice->CreateInputLayout(layout, numElements, PassDesc.pIAInputSignature, PassDesc.IAInputSignatureSize, &g_pVertexLayout);
	if (FAILED(hr))
		return hr;

	// Связываем объект входных данных с графическим конвейером
	g_pd3dDevice->IASetInputLayout(g_pVertexLayout);

	const int vcount = 528;
	const int icount = 3072;

	// Создаем индексный буфер
	DWORD indices[] = {
		0, 1, 2,
		2, 1, 3,
		4, 5, 0,
		4, 0, 2,
		6, 7, 5,
		6, 5, 4,
		8, 9, 7,
		8, 7, 6,
		10, 11, 9,
		10, 9, 8,
		12, 13, 11,
		12, 11, 10,
		14, 15, 13,
		14, 13, 12,
		16, 17, 15,
		16, 15, 14,
		18, 19, 17,
		18, 17, 16,
		20, 21, 19,
		20, 19, 18,
		22, 23, 21,
		22, 21, 20,
		24, 25, 23,
		24, 23, 22,
		26, 27, 25,
		26, 25, 24,
		28, 29, 27,
		28, 27, 26,
		30, 31, 29,
		30, 29, 28,
		3, 1, 31,
		3, 31, 30,
		32, 2, 3,
		32, 3, 33,
		34, 4, 2,
		34, 2, 32,
		35, 6, 4,
		35, 4, 34,
		36, 8, 6,
		36, 6, 35,
		37, 10, 8,
		37, 8, 36,
		38, 12, 10,
		38, 10, 37,
		39, 14, 12,
		39, 12, 38,
		40, 16, 14,
		40, 14, 39,
		41, 18, 16,
		41, 16, 40,
		42, 20, 18,
		42, 18, 41,
		43, 22, 20,
		43, 20, 42,
		44, 24, 22,
		44, 22, 43,
		45, 26, 44,
		26, 24, 44,
		46, 28, 45,
		28, 26, 45,
		47, 30, 28,
		47, 28, 46,
		33, 3, 30,
		33, 30, 47,
		48, 32, 33,
		48, 33, 49,
		50, 34, 32,
		50, 32, 48,
		51, 35, 34,
		51, 34, 50,
		52, 36, 35,
		52, 35, 51,
		53, 37, 36,
		53, 36, 52,
		54, 38, 37,
		54, 37, 53,
		55, 39, 38,
		55, 38, 54,
		56, 40, 39,
		56, 39, 55,
		57, 41, 40,
		57, 40, 56,
		58, 42, 41,
		58, 41, 57,
		59, 43, 42,
		59, 42, 58,
		60, 44, 43,
		60, 43, 59,
		61, 45, 44,
		61, 44, 60,
		62, 46, 45,
		62, 45, 61,
		63, 47, 46,
		63, 46, 62,
		49, 33, 47,
		49, 47, 63,
		64, 48, 49,
		64, 49, 65,
		66, 50, 48,
		66, 48, 64,
		67, 51, 50,
		67, 50, 66,
		68, 52, 51,
		68, 51, 67,
		69, 53, 68,
		53, 52, 68,
		70, 54, 53,
		70, 53, 69,
		71, 55, 54,
		71, 54, 70,
		72, 56, 55,
		72, 55, 71,
		73, 57, 56,
		73, 56, 72,
		74, 58, 57,
		74, 57, 73,
		75, 59, 58,
		75, 58, 74,
		76, 60, 59,
		76, 59, 75,
		77, 61, 60,
		77, 60, 76,
		78, 62, 61,
		78, 61, 77,
		79, 63, 62,
		79, 62, 78,
		65, 49, 63,
		65, 63, 79,
		80, 64, 65,
		80, 65, 81,
		82, 66, 64,
		82, 64, 80,
		83, 67, 66,
		83, 66, 82,
		84, 68, 67,
		84, 67, 83,
		85, 69, 68,
		85, 68, 84,
		86, 70, 69,
		86, 69, 85,
		87, 71, 70,
		87, 70, 86,
		88, 72, 71,
		88, 71, 87,
		89, 73, 72,
		89, 72, 88,
		90, 74, 73,
		90, 73, 89,
		91, 75, 74,
		91, 74, 90,
		92, 76, 75,
		92, 75, 91,
		93, 77, 76,
		93, 76, 92,
		94, 78, 77,
		94, 77, 93,
		95, 79, 78,
		95, 78, 94,
		81, 65, 79,
		81, 79, 95,
		96, 80, 81,
		96, 81, 97,
		98, 82, 80,
		98, 80, 96,
		99, 83, 82,
		99, 82, 98,
		100, 84, 83,
		100, 83, 99,
		101, 85, 84,
		101, 84, 100,
		102, 86, 85,
		102, 85, 101,
		103, 87, 86,
		103, 86, 102,
		104, 88, 87,
		104, 87, 103,
		105, 89, 88,
		105, 88, 104,
		106, 90, 89,
		106, 89, 105,
		107, 91, 90,
		107, 90, 106,
		108, 92, 91,
		108, 91, 107,
		109, 93, 92,
		109, 92, 108,
		110, 94, 93,
		110, 93, 109,
		111, 95, 94,
		111, 94, 110,
		97, 81, 95,
		97, 95, 111,
		112, 96, 97,
		112, 97, 113,
		114, 98, 96,
		114, 96, 112,
		115, 99, 98,
		115, 98, 114,
		116, 100, 99,
		116, 99, 115,
		117, 101, 100,
		117, 100, 116,
		118, 102, 101,
		118, 101, 117,
		119, 103, 102,
		119, 102, 118,
		120, 104, 103,
		120, 103, 119,
		121, 105, 104,
		121, 104, 120,
		122, 106, 105,
		122, 105, 121,
		123, 107, 106,
		123, 106, 122,
		124, 108, 107,
		124, 107, 123,
		125, 109, 108,
		125, 108, 124,
		126, 110, 109,
		126, 109, 125,
		127, 111, 110,
		127, 110, 126,
		113, 97, 111,
		113, 111, 127,
		128, 112, 113,
		128, 113, 129,
		130, 114, 112,
		130, 112, 128,
		131, 115, 114,
		131, 114, 130,
		132, 116, 115,
		132, 115, 131,
		133, 117, 132,
		117, 116, 132,
		134, 118, 117,
		134, 117, 133,
		135, 119, 118,
		135, 118, 134,
		136, 120, 119,
		136, 119, 135,
		137, 121, 120,
		137, 120, 136,
		138, 122, 121,
		138, 121, 137,
		139, 123, 122,
		139, 122, 138,
		140, 124, 123,
		140, 123, 139,
		141, 125, 124,
		141, 124, 140,
		142, 126, 125,
		142, 125, 141,
		143, 127, 126,
		143, 126, 142,
		129, 113, 127,
		129, 127, 143,
		144, 128, 129,
		144, 129, 145,
		146, 130, 128,
		146, 128, 144,
		147, 131, 130,
		147, 130, 146,
		148, 132, 131,
		148, 131, 147,
		149, 133, 132,
		149, 132, 148,
		150, 134, 133,
		150, 133, 149,
		151, 135, 134,
		151, 134, 150,
		152, 136, 135,
		152, 135, 151,
		153, 137, 136,
		153, 136, 152,
		154, 138, 137,
		154, 137, 153,
		155, 139, 138,
		155, 138, 154,
		156, 140, 155,
		140, 139, 155,
		157, 141, 140,
		157, 140, 156,
		158, 142, 141,
		158, 141, 157,
		159, 143, 142,
		159, 142, 158,
		145, 129, 143,
		145, 143, 159,
		160, 144, 145,
		160, 145, 161,
		162, 146, 144,
		162, 144, 160,
		163, 147, 146,
		163, 146, 162,
		164, 148, 147,
		164, 147, 163,
		165, 149, 148,
		165, 148, 164,
		166, 150, 149,
		166, 149, 165,
		167, 151, 150,
		167, 150, 166,
		168, 152, 151,
		168, 151, 167,
		169, 153, 152,
		169, 152, 168,
		170, 154, 153,
		170, 153, 169,
		171, 155, 154,
		171, 154, 170,
		172, 156, 155,
		172, 155, 171,
		173, 157, 156,
		173, 156, 172,
		174, 158, 157,
		174, 157, 173,
		175, 159, 158,
		175, 158, 174,
		161, 145, 159,
		161, 159, 175,
		176, 160, 161,
		176, 161, 177,
		178, 162, 160,
		178, 160, 176,
		179, 163, 162,
		179, 162, 178,
		180, 164, 163,
		180, 163, 179,
		181, 165, 164,
		181, 164, 180,
		182, 166, 165,
		182, 165, 181,
		183, 167, 166,
		183, 166, 182,
		184, 168, 167,
		184, 167, 183,
		185, 169, 168,
		185, 168, 184,
		186, 170, 169,
		186, 169, 185,
		187, 171, 170,
		187, 170, 186,
		188, 172, 171,
		188, 171, 187,
		189, 173, 172,
		189, 172, 188,
		190, 174, 173,
		190, 173, 189,
		191, 175, 174,
		191, 174, 190,
		177, 161, 175,
		177, 175, 191,
		192, 176, 177,
		192, 177, 193,
		194, 178, 176,
		194, 176, 192,
		195, 179, 178,
		195, 178, 194,
		196, 180, 179,
		196, 179, 195,
		197, 181, 180,
		197, 180, 196,
		198, 182, 181,
		198, 181, 197,
		199, 183, 182,
		199, 182, 198,
		200, 184, 183,
		200, 183, 199,
		201, 185, 184,
		201, 184, 200,
		202, 186, 185,
		202, 185, 201,
		203, 187, 186,
		203, 186, 202,
		204, 188, 203,
		188, 187, 203,
		205, 189, 188,
		205, 188, 204,
		206, 190, 189,
		206, 189, 205,
		207, 191, 190,
		207, 190, 206,
		193, 177, 191,
		193, 191, 207,
		208, 192, 193,
		208, 193, 209,
		210, 194, 192,
		210, 192, 208,
		211, 195, 194,
		211, 194, 210,
		212, 196, 195,
		212, 195, 211,
		213, 197, 196,
		213, 196, 212,
		214, 198, 197,
		214, 197, 213,
		215, 199, 198,
		215, 198, 214,
		216, 200, 199,
		216, 199, 215,
		217, 201, 200,
		217, 200, 216,
		218, 202, 201,
		218, 201, 217,
		219, 203, 202,
		219, 202, 218,
		220, 204, 203,
		220, 203, 219,
		221, 205, 204,
		221, 204, 220,
		222, 206, 205,
		222, 205, 221,
		223, 207, 206,
		223, 206, 222,
		209, 193, 207,
		209, 207, 223,
		224, 208, 209,
		224, 209, 225,
		226, 210, 208,
		226, 208, 224,
		227, 211, 210,
		227, 210, 226,
		228, 212, 211,
		228, 211, 227,
		229, 213, 212,
		229, 212, 228,
		230, 214, 213,
		230, 213, 229,
		231, 215, 214,
		231, 214, 230,
		232, 216, 215,
		232, 215, 231,
		233, 217, 216,
		233, 216, 232,
		234, 218, 217,
		234, 217, 233,
		235, 219, 218,
		235, 218, 234,
		236, 220, 219,
		236, 219, 235,
		237, 221, 220,
		237, 220, 236,
		238, 222, 221,
		238, 221, 237,
		239, 223, 222,
		239, 222, 238,
		225, 209, 223,
		225, 223, 239,
		240, 224, 225,
		240, 225, 241,
		242, 226, 224,
		242, 224, 240,
		243, 227, 226,
		243, 226, 242,
		244, 228, 227,
		244, 227, 243,
		245, 229, 228,
		245, 228, 244,
		246, 230, 229,
		246, 229, 245,
		247, 231, 230,
		247, 230, 246,
		248, 232, 231,
		248, 231, 247,
		249, 233, 232,
		249, 232, 248,
		250, 234, 233,
		250, 233, 249,
		251, 235, 234,
		251, 234, 250,
		252, 236, 235,
		252, 235, 251,
		253, 237, 236,
		253, 236, 252,
		254, 238, 237,
		254, 237, 253,
		255, 239, 238,
		255, 238, 254,
		241, 225, 239,
		241, 239, 255,
		256, 240, 241,
		256, 241, 257,
		258, 242, 240,
		258, 240, 256,
		259, 243, 242,
		259, 242, 258,
		260, 244, 243,
		260, 243, 259,
		261, 245, 244,
		261, 244, 260,
		262, 246, 245,
		262, 245, 261,
		263, 247, 246,
		263, 246, 262,
		264, 248, 247,
		264, 247, 263,
		265, 249, 248,
		265, 248, 264,
		266, 250, 249,
		266, 249, 265,
		267, 251, 250,
		267, 250, 266,
		268, 252, 251,
		268, 251, 267,
		269, 253, 252,
		269, 252, 268,
		270, 254, 253,
		270, 253, 269,
		271, 255, 254,
		271, 254, 270,
		257, 241, 255,
		257, 255, 271,
		272, 273, 274,
		272, 274, 275,
		276, 277, 273,
		276, 273, 272,
		278, 279, 277,
		278, 277, 276,
		280, 281, 279,
		280, 279, 278,
		282, 283, 281,
		282, 281, 280,
		284, 285, 283,
		284, 283, 282,
		286, 287, 285,
		286, 285, 284,
		288, 289, 287,
		288, 287, 286,
		290, 291, 289,
		290, 289, 288,
		292, 293, 291,
		292, 291, 290,
		294, 295, 293,
		294, 293, 292,
		296, 297, 295,
		296, 295, 294,
		298, 299, 297,
		298, 297, 296,
		300, 301, 299,
		300, 299, 298,
		302, 303, 301,
		302, 301, 300,
		275, 274, 303,
		275, 303, 302,
		304, 272, 275,
		304, 275, 305,
		306, 276, 272,
		306, 272, 304,
		307, 278, 276,
		307, 276, 306,
		308, 280, 278,
		308, 278, 307,
		309, 282, 280,
		309, 280, 308,
		310, 284, 282,
		310, 282, 309,
		311, 286, 284,
		311, 284, 310,
		312, 288, 286,
		312, 286, 311,
		313, 290, 288,
		313, 288, 312,
		314, 292, 290,
		314, 290, 313,
		315, 294, 292,
		315, 292, 314,
		316, 296, 294,
		316, 294, 315,
		317, 298, 296,
		317, 296, 316,
		318, 300, 298,
		318, 298, 317,
		319, 302, 300,
		319, 300, 318,
		305, 275, 302,
		305, 302, 319,
		320, 304, 305,
		320, 305, 321,
		322, 306, 304,
		322, 304, 320,
		323, 307, 306,
		323, 306, 322,
		324, 308, 307,
		324, 307, 323,
		325, 309, 308,
		325, 308, 324,
		326, 310, 309,
		326, 309, 325,
		327, 311, 310,
		327, 310, 326,
		328, 312, 311,
		328, 311, 327,
		329, 313, 312,
		329, 312, 328,
		330, 314, 313,
		330, 313, 329,
		331, 315, 314,
		331, 314, 330,
		332, 316, 315,
		332, 315, 331,
		333, 317, 316,
		333, 316, 332,
		334, 318, 317,
		334, 317, 333,
		335, 319, 318,
		335, 318, 334,
		321, 305, 319,
		321, 319, 335,
		336, 320, 321,
		336, 321, 337,
		338, 322, 320,
		338, 320, 336,
		339, 323, 338,
		323, 322, 338,
		340, 324, 323,
		340, 323, 339,
		341, 325, 324,
		341, 324, 340,
		342, 326, 325,
		342, 325, 341,
		343, 327, 326,
		343, 326, 342,
		344, 328, 327,
		344, 327, 343,
		345, 329, 328,
		345, 328, 344,
		346, 330, 329,
		346, 329, 345,
		347, 331, 330,
		347, 330, 346,
		348, 332, 331,
		348, 331, 347,
		349, 333, 332,
		349, 332, 348,
		350, 334, 333,
		350, 333, 349,
		351, 335, 334,
		351, 334, 350,
		337, 321, 335,
		337, 335, 351,
		352, 336, 337,
		352, 337, 353,
		354, 338, 336,
		354, 336, 352,
		355, 339, 338,
		355, 338, 354,
		356, 340, 339,
		356, 339, 355,
		357, 341, 340,
		357, 340, 356,
		358, 342, 341,
		358, 341, 357,
		359, 343, 342,
		359, 342, 358,
		360, 344, 343,
		360, 343, 359,
		361, 345, 344,
		361, 344, 360,
		362, 346, 345,
		362, 345, 361,
		363, 347, 346,
		363, 346, 362,
		364, 348, 347,
		364, 347, 363,
		365, 349, 348,
		365, 348, 364,
		366, 350, 349,
		366, 349, 365,
		367, 351, 350,
		367, 350, 366,
		353, 337, 351,
		353, 351, 367,
		368, 352, 353,
		368, 353, 369,
		370, 354, 352,
		370, 352, 368,
		371, 355, 354,
		371, 354, 370,
		372, 356, 355,
		372, 355, 371,
		373, 357, 356,
		373, 356, 372,
		374, 358, 357,
		374, 357, 373,
		375, 359, 358,
		375, 358, 374,
		376, 360, 359,
		376, 359, 375,
		377, 361, 360,
		377, 360, 376,
		378, 362, 361,
		378, 361, 377,
		379, 363, 362,
		379, 362, 378,
		380, 364, 363,
		380, 363, 379,
		381, 365, 364,
		381, 364, 380,
		382, 366, 365,
		382, 365, 381,
		383, 367, 366,
		383, 366, 382,
		369, 353, 367,
		369, 367, 383,
		384, 368, 369,
		384, 369, 385,
		386, 370, 368,
		386, 368, 384,
		387, 371, 370,
		387, 370, 386,
		388, 372, 371,
		388, 371, 387,
		389, 373, 372,
		389, 372, 388,
		390, 374, 373,
		390, 373, 389,
		391, 375, 374,
		391, 374, 390,
		392, 376, 375,
		392, 375, 391,
		393, 377, 376,
		393, 376, 392,
		394, 378, 377,
		394, 377, 393,
		395, 379, 378,
		395, 378, 394,
		396, 380, 379,
		396, 379, 395,
		397, 381, 380,
		397, 380, 396,
		398, 382, 381,
		398, 381, 397,
		399, 383, 382,
		399, 382, 398,
		385, 369, 383,
		385, 383, 399,
		400, 384, 385,
		400, 385, 401,
		402, 386, 384,
		402, 384, 400,
		403, 387, 386,
		403, 386, 402,
		404, 388, 387,
		404, 387, 403,
		405, 389, 388,
		405, 388, 404,
		406, 390, 389,
		406, 389, 405,
		407, 391, 390,
		407, 390, 406,
		408, 392, 391,
		408, 391, 407,
		409, 393, 392,
		409, 392, 408,
		410, 394, 393,
		410, 393, 409,
		411, 395, 394,
		411, 394, 410,
		412, 396, 395,
		412, 395, 411,
		413, 397, 396,
		413, 396, 412,
		414, 398, 397,
		414, 397, 413,
		415, 399, 398,
		415, 398, 414,
		401, 385, 399,
		401, 399, 415,
		416, 400, 401,
		416, 401, 417,
		418, 402, 400,
		418, 400, 416,
		419, 403, 402,
		419, 402, 418,
		420, 404, 403,
		420, 403, 419,
		421, 405, 404,
		421, 404, 420,
		422, 406, 405,
		422, 405, 421,
		423, 407, 406,
		423, 406, 422,
		424, 408, 407,
		424, 407, 423,
		425, 409, 408,
		425, 408, 424,
		426, 410, 409,
		426, 409, 425,
		427, 411, 410,
		427, 410, 426,
		428, 412, 427,
		412, 411, 427,
		429, 413, 412,
		429, 412, 428,
		430, 414, 413,
		430, 413, 429,
		431, 415, 414,
		431, 414, 430,
		417, 401, 415,
		417, 415, 431,
		432, 416, 417,
		432, 417, 433,
		434, 418, 416,
		434, 416, 432,
		435, 419, 418,
		435, 418, 434,
		436, 420, 435,
		420, 419, 435,
		437, 421, 420,
		437, 420, 436,
		438, 422, 421,
		438, 421, 437,
		439, 423, 422,
		439, 422, 438,
		440, 424, 423,
		440, 423, 439,
		441, 425, 424,
		441, 424, 440,
		442, 426, 425,
		442, 425, 441,
		443, 427, 426,
		443, 426, 442,
		444, 428, 427,
		444, 427, 443,
		445, 429, 428,
		445, 428, 444,
		446, 430, 429,
		446, 429, 445,
		447, 431, 430,
		447, 430, 446,
		433, 417, 431,
		433, 431, 447,
		448, 432, 433,
		448, 433, 449,
		450, 434, 432,
		450, 432, 448,
		451, 435, 434,
		451, 434, 450,
		452, 436, 435,
		452, 435, 451,
		453, 437, 436,
		453, 436, 452,
		454, 438, 437,
		454, 437, 453,
		455, 439, 438,
		455, 438, 454,
		456, 440, 439,
		456, 439, 455,
		457, 441, 440,
		457, 440, 456,
		458, 442, 441,
		458, 441, 457,
		459, 443, 442,
		459, 442, 458,
		460, 444, 443,
		460, 443, 459,
		461, 445, 444,
		461, 444, 460,
		462, 446, 445,
		462, 445, 461,
		463, 447, 446,
		463, 446, 462,
		449, 433, 447,
		449, 447, 463,
		464, 448, 449,
		464, 449, 465,
		466, 450, 448,
		466, 448, 464,
		467, 451, 450,
		467, 450, 466,
		468, 452, 451,
		468, 451, 467,
		469, 453, 452,
		469, 452, 468,
		470, 454, 453,
		470, 453, 469,
		471, 455, 454,
		471, 454, 470,
		472, 456, 455,
		472, 455, 471,
		473, 457, 456,
		473, 456, 472,
		474, 458, 457,
		474, 457, 473,
		475, 459, 458,
		475, 458, 474,
		476, 460, 459,
		476, 459, 475,
		477, 461, 460,
		477, 460, 476,
		478, 462, 461,
		478, 461, 477,
		479, 463, 462,
		479, 462, 478,
		465, 449, 463,
		465, 463, 479,
		480, 464, 465,
		480, 465, 481,
		482, 466, 464,
		482, 464, 480,
		483, 467, 466,
		483, 466, 482,
		484, 468, 467,
		484, 467, 483,
		485, 469, 468,
		485, 468, 484,
		486, 470, 469,
		486, 469, 485,
		487, 471, 470,
		487, 470, 486,
		488, 472, 471,
		488, 471, 487,
		489, 473, 472,
		489, 472, 488,
		490, 474, 473,
		490, 473, 489,
		491, 475, 474,
		491, 474, 490,
		492, 476, 475,
		492, 475, 491,
		493, 477, 476,
		493, 476, 492,
		494, 478, 477,
		494, 477, 493,
		495, 479, 478,
		495, 478, 494,
		481, 465, 479,
		481, 479, 495,
		496, 480, 481,
		496, 481, 497,
		498, 482, 480,
		498, 480, 496,
		499, 483, 482,
		499, 482, 498,
		500, 484, 483,
		500, 483, 499,
		501, 485, 500,
		485, 484, 500,
		502, 486, 485,
		502, 485, 501,
		503, 487, 486,
		503, 486, 502,
		504, 488, 487,
		504, 487, 503,
		505, 489, 488,
		505, 488, 504,
		506, 490, 489,
		506, 489, 505,
		507, 491, 490,
		507, 490, 506,
		508, 492, 491,
		508, 491, 507,
		509, 493, 492,
		509, 492, 508,
		510, 494, 493,
		510, 493, 509,
		511, 495, 494,
		511, 494, 510,
		497, 481, 495,
		497, 495, 511,
		512, 496, 497,
		512, 497, 513,
		514, 498, 496,
		514, 496, 512,
		515, 499, 498,
		515, 498, 514,
		516, 500, 499,
		516, 499, 515,
		517, 501, 500,
		517, 500, 516,
		518, 502, 501,
		518, 501, 517,
		519, 503, 502,
		519, 502, 518,
		520, 504, 503,
		520, 503, 519,
		521, 505, 504,
		521, 504, 520,
		522, 506, 505,
		522, 505, 521,
		523, 507, 506,
		523, 506, 522,
		524, 508, 507,
		524, 507, 523,
		525, 509, 508,
		525, 508, 524,
		526, 510, 509,
		526, 509, 525,
		527, 511, 510,
		527, 510, 526,
		513, 497, 511,
		513, 511, 527,
		1, 0, 512,
		1, 512, 513,
		5, 514, 512,
		5, 512, 0,
		7, 515, 514,
		7, 514, 5,
		9, 516, 515,
		9, 515, 7,
		11, 517, 516,
		11, 516, 9,
		13, 518, 517,
		13, 517, 11,
		15, 519, 518,
		15, 518, 13,
		17, 520, 519,
		17, 519, 15,
		19, 521, 520,
		19, 520, 17,
		21, 522, 521,
		21, 521, 19,
		23, 523, 522,
		23, 522, 21,
		25, 524, 523,
		25, 523, 23,
		27, 525, 524,
		27, 524, 25,
		29, 526, 525,
		29, 525, 27,
		31, 527, 526,
		31, 526, 29,
		1, 513, 527,
		1, 527, 31,
	};

	// Данные вершин куба: буфер вершин
	SimpleVertex vertices[] =
	{

		//{ D3DXVECTOR3(-0.000000f, 1.000000f, 0.000000f), D3DXVECTOR2(0.022329f, 0.180588f) },



		{ D3DXVECTOR3(1.277164f, 0.114805f, 0.000000f), D3DXVECTOR2(0.500000f, 0.308658f), },
		{ D3DXVECTOR3(1.300000f, 0.000000f, 0.000000f), D3DXVECTOR2(0.500000f, 0.500000f),},
		{ D3DXVECTOR3(1.252624f, 0.114805f, -0.249162f), D3DXVECTOR2(0.468750f, 0.308658f) },
		{ D3DXVECTOR3(1.275021f, 0.000000f, -0.253617f), D3DXVECTOR2(0.468750f, 0.500000f) },
		{ D3DXVECTOR3(1.188841f, 0.212132f, -0.236475f), D3DXVECTOR2(0.468750f, 0.146447f) },
		{ D3DXVECTOR3(1.212132f, 0.212132f, 0.000000f), D3DXVECTOR2(0.500000f, 0.146447f),},
		{ D3DXVECTOR3(1.093384f, 0.277164f, -0.217487f), D3DXVECTOR2(0.468750f, 0.038060f) },
		{ D3DXVECTOR3(1.114805f, 0.277164f, 0.000000f), D3DXVECTOR2(0.500000f, 0.038060f),},
		{ D3DXVECTOR3(0.980785f, 0.300000f, -0.195090f), D3DXVECTOR2(0.468750f, 0.000000f) },
		{ D3DXVECTOR3(1.000000f, 0.300000f, 0.000000f), D3DXVECTOR2(0.500000f, 0.000000f),},
		{ D3DXVECTOR3(0.868186f, 0.277164f, -0.172693f), D3DXVECTOR2(0.468750f, 0.038060f) },
		{ D3DXVECTOR3(0.885195f, 0.277164f, 0.000000f), D3DXVECTOR2(0.500000f, 0.038060f), },
		{ D3DXVECTOR3(0.772729f, 0.212132f, -0.153705f), D3DXVECTOR2(0.468750f, 0.146447f) },
		{ D3DXVECTOR3(0.787868f, 0.212132f, 0.000000f), D3DXVECTOR2(0.500000f, 0.146447f), },
		{ D3DXVECTOR3(0.708947f, 0.114805f, -0.141018f), D3DXVECTOR2(0.468750f, 0.308658f) },
		{ D3DXVECTOR3(0.722836f, 0.114805f, 0.000000f), D3DXVECTOR2(0.500000f, 0.308658f), },
		{ D3DXVECTOR3(0.686550f, 0.000000f, -0.136563f), D3DXVECTOR2(0.468750f, 0.500000f) },
		{ D3DXVECTOR3(0.700000f, -0.000000f, -0.000000f), D3DXVECTOR2(0.500000f, 0.500000f)},
		{ D3DXVECTOR3(0.708947f, -0.114805f, -0.141018f), D3DXVECTOR2(0.468750f, 0.691342f) },
		{ D3DXVECTOR3(0.722836f, -0.114805f, -0.000000f), D3DXVECTOR2(0.500000f, 0.691342f) },
		{ D3DXVECTOR3(0.772729f, -0.212132f, -0.153705f), D3DXVECTOR2(0.468750f, 0.853553f) },
		{ D3DXVECTOR3(0.787868f, -0.212132f, -0.000000f), D3DXVECTOR2(0.500000f, 0.853553f) },
		{ D3DXVECTOR3(0.868186f, -0.277164f, -0.172693f), D3DXVECTOR2(0.468750f, 0.961940f) },
		{ D3DXVECTOR3(0.885195f, -0.277164f, -0.000000f), D3DXVECTOR2(0.500000f, 0.961940f) },
		{ D3DXVECTOR3(0.980785f, -0.300000f, -0.195090f), D3DXVECTOR2(0.468750f, 1.000000f) },
		{ D3DXVECTOR3(1.000000f, -0.300000f, -0.000000f), D3DXVECTOR2(0.500000f, 1.000000f) },
		{ D3DXVECTOR3(1.093384f, -0.277164f, -0.217488f), D3DXVECTOR2(0.468750f, 0.961940f) },
		{ D3DXVECTOR3(1.114805f, -0.277164f, -0.000000f), D3DXVECTOR2(0.500000f, 0.961940f) },
		{ D3DXVECTOR3(1.188841f, -0.212132f, -0.236475f), D3DXVECTOR2(0.468750f, 0.853553f) },
		{ D3DXVECTOR3(1.212132f, -0.212132f, -0.000000f), D3DXVECTOR2(0.500000f, 0.853553f) },
		{ D3DXVECTOR3(1.252624f, -0.114805f, -0.249162f), D3DXVECTOR2(0.468750f, 0.691342f) },
		{ D3DXVECTOR3(1.277164f, -0.114805f, -0.000000f), D3DXVECTOR2(0.500000f, 0.691342f) },
		{ D3DXVECTOR3(1.179946f, 0.114805f, -0.488749f), D3DXVECTOR2(0.437500f, 0.308658f) },
		{ D3DXVECTOR3(1.201043f, 0.000000f, -0.497488f), D3DXVECTOR2(0.437500f, 0.500000f) },
		{ D3DXVECTOR3(1.119864f, 0.212132f, -0.463863f), D3DXVECTOR2(0.437500f, 0.146447f) },
		{ D3DXVECTOR3(1.029946f, 0.277164f, -0.426617f), D3DXVECTOR2(0.437500f, 0.038060f) },
		{ D3DXVECTOR3(0.923880f, 0.300000f, -0.382683f), D3DXVECTOR2(0.437500f, 0.000000f)},
		{ D3DXVECTOR3(0.817814f, 0.277164f, -0.338749f), D3DXVECTOR2(0.437500f, 0.038060f) },
		{ D3DXVECTOR3(0.727895f, 0.212132f, -0.301504f), D3DXVECTOR2(0.437500f, 0.146447f) },
		{ D3DXVECTOR3(0.667814f, 0.114805f, -0.276617f), D3DXVECTOR2(0.437500f, 0.308658f) },
		{ D3DXVECTOR3(0.646716f, 0.000000f, -0.267878f), D3DXVECTOR2(0.437500f, 0.500000f) },
		{ D3DXVECTOR3(0.667814f, -0.114805f, -0.276617f), D3DXVECTOR2(0.437500f, 0.691342f)},
		{ D3DXVECTOR3(0.727895f, -0.212132f, -0.301504f), D3DXVECTOR2(0.437500f, 0.853553f)},
		{ D3DXVECTOR3(0.817814f, -0.277164f, -0.338750f), D3DXVECTOR2(0.437500f, 0.961940f)},
		{ D3DXVECTOR3(0.923880f, -0.300000f, -0.382684f), D3DXVECTOR2(0.437500f, 1.000000f)},
		{ D3DXVECTOR3(1.029946f, -0.277164f, -0.426618f), D3DXVECTOR2(0.437500f, 0.961940f)},
		{ D3DXVECTOR3(1.119864f, -0.212132f, -0.463863f), D3DXVECTOR2(0.437500f, 0.853553f)},
		{ D3DXVECTOR3(1.179946f, -0.114805f, -0.488750f), D3DXVECTOR2(0.437500f, 0.691342f)},
		{ D3DXVECTOR3(1.061923f, 0.114805f, -0.709554f), D3DXVECTOR2(0.406250f, 0.308658f) },
		{ D3DXVECTOR3(1.080910f, 0.000000f, -0.722241f), D3DXVECTOR2(0.406250f, 0.500000f) },
		{ D3DXVECTOR3(1.007851f, 0.212132f, -0.673424f), D3DXVECTOR2(0.406250f, 0.146447f) },
		{ D3DXVECTOR3(0.926926f, 0.277164f, -0.619352f), D3DXVECTOR2(0.406250f, 0.038060f) },
		{ D3DXVECTOR3(0.831470f, 0.300000f, -0.555570f), D3DXVECTOR2(0.406250f, 0.000000f) },
		{ D3DXVECTOR3(0.736013f, 0.277164f, -0.491788f), D3DXVECTOR2(0.406250f, 0.038060f) },
		{ D3DXVECTOR3(0.655088f, 0.212132f, -0.437716f), D3DXVECTOR2(0.406250f, 0.146447f) },
		{ D3DXVECTOR3(0.601016f, 0.114805f, -0.401586f), D3DXVECTOR2(0.406250f, 0.308658f) },
		{ D3DXVECTOR3(0.582029f, 0.000000f, -0.388899f), D3DXVECTOR2(0.406250f, 0.500000f) },
		{ D3DXVECTOR3(0.601016f, -0.114805f, -0.401586f), D3DXVECTOR2(0.406250f, 0.691342f) },
		{ D3DXVECTOR3(0.655088f, -0.212132f, -0.437716f), D3DXVECTOR2(0.406250f, 0.853553f) },
		{ D3DXVECTOR3(0.736013f, -0.277164f, -0.491788f), D3DXVECTOR2(0.406250f, 0.961940f) },
		{ D3DXVECTOR3(0.831470f, -0.300000f, -0.555570f), D3DXVECTOR2(0.406250f, 1.000000f) },
		{ D3DXVECTOR3(0.926926f, -0.277164f, -0.619353f), D3DXVECTOR2(0.406250f, 0.961940f) },
		{ D3DXVECTOR3(1.007851f, -0.212132f, -0.673425f), D3DXVECTOR2(0.406250f, 0.853553f) },
		{ D3DXVECTOR3(1.061923f, -0.114805f, -0.709554f), D3DXVECTOR2(0.406250f, 0.691342f) },
		{ D3DXVECTOR3(0.903091f, 0.114806f, -0.903091f), D3DXVECTOR2(0.375000f, 0.308658f)},
		{ D3DXVECTOR3(0.919239f, 0.000001f, -0.919239f), D3DXVECTOR2(0.375000f, 0.500000f)},
		{ D3DXVECTOR3(0.857107f, 0.212133f, -0.857107f), D3DXVECTOR2(0.375000f, 0.146447f)},
		{ D3DXVECTOR3(0.788286f, 0.277164f, -0.788286f), D3DXVECTOR2(0.375000f, 0.038060f)},
		{ D3DXVECTOR3(0.707107f, 0.300000f, -0.707107f), D3DXVECTOR2(0.375000f, 0.000000f)},
		{ D3DXVECTOR3(0.625927f, 0.277164f, -0.625927f), D3DXVECTOR2(0.375000f, 0.038060f)},
		{ D3DXVECTOR3(0.557107f, 0.212132f, -0.557107f), D3DXVECTOR2(0.375000f, 0.146447f)},
		{ D3DXVECTOR3(0.511122f, 0.114805f, -0.511122f), D3DXVECTOR2(0.375000f, 0.308658f)},
		{ D3DXVECTOR3(0.494975f, 0.000000f, -0.494975f), D3DXVECTOR2(0.375000f, 0.500000f)},
		{ D3DXVECTOR3(0.511122f, -0.114805f, -0.511122f), D3DXVECTOR2(0.375000f, 0.691342f)},
		{ D3DXVECTOR3(0.557107f, -0.212132f, -0.557107f), D3DXVECTOR2(0.375000f, 0.853553f)},
		{ D3DXVECTOR3(0.625927f, -0.277163f, -0.625928f), D3DXVECTOR2(0.375000f, 0.961940f)},
		{ D3DXVECTOR3(0.707107f, -0.300000f, -0.707107f), D3DXVECTOR2(0.375000f, 1.000000f) },
		{ D3DXVECTOR3(0.788286f, -0.277163f, -0.788286f), D3DXVECTOR2(0.375000f, 0.961940f)},
		{ D3DXVECTOR3(0.857107f, -0.212131f, -0.857107f), D3DXVECTOR2(0.375000f, 0.853553f)},
		{ D3DXVECTOR3(0.903091f, -0.114804f, -0.903091f), D3DXVECTOR2(0.375000f, 0.691342f)},
		{ D3DXVECTOR3(0.709554f, 0.114806f, -1.061923f), D3DXVECTOR2(0.343750f, 0.308658f) },
		{ D3DXVECTOR3(0.722241f, 0.000001f, -1.080911f), D3DXVECTOR2(0.343750f, 0.500000f) },
		{ D3DXVECTOR3(0.673424f, 0.212133f, -1.007851f), D3DXVECTOR2(0.343750f, 0.146447f) },
		{ D3DXVECTOR3(0.619352f, 0.277164f, -0.926926f), D3DXVECTOR2(0.343750f, 0.038060f) },
		{ D3DXVECTOR3(0.555570f, 0.300001f, -0.831470f), D3DXVECTOR2(0.343750f, 0.000000f)},
		{ D3DXVECTOR3(0.491788f, 0.277164f, -0.736013f), D3DXVECTOR2(0.343750f, 0.038060f) },
		{ D3DXVECTOR3(0.437716f, 0.212132f, -0.655088f), D3DXVECTOR2(0.343750f, 0.146447f) },
		{ D3DXVECTOR3(0.401586f, 0.114805f, -0.601016f), D3DXVECTOR2(0.343750f, 0.308658f) },
		{ D3DXVECTOR3(0.388899f, 0.000000f, -0.582029f), D3DXVECTOR2(0.343750f, 0.500000f) },
		{ D3DXVECTOR3(0.401586f, -0.114805f, -0.601016f), D3DXVECTOR2(0.343750f, 0.691342f)},
		{ D3DXVECTOR3(0.437716f, -0.212132f, -0.655088f), D3DXVECTOR2(0.343750f, 0.853553f)},
		{ D3DXVECTOR3(0.491788f, -0.277163f, -0.736013f), D3DXVECTOR2(0.343750f, 0.961940f)},
		{ D3DXVECTOR3(0.555570f, -0.299999f, -0.831470f), D3DXVECTOR2(0.343750f, 1.000000f) },
		{ D3DXVECTOR3(0.619352f, -0.277163f, -0.926927f), D3DXVECTOR2(0.343750f, 0.961940f)},
		{ D3DXVECTOR3(0.673424f, -0.212131f, -1.007851f), D3DXVECTOR2(0.343750f, 0.853553f)},
		{ D3DXVECTOR3(0.709554f, -0.114804f, -1.061923f), D3DXVECTOR2(0.343750f, 0.691342f)},
		{ D3DXVECTOR3(0.488750f, 0.114806f, -1.179945f), D3DXVECTOR2(0.312500f, 0.308658f) },
		{ D3DXVECTOR3(0.497489f, 0.000001f, -1.201043f), D3DXVECTOR2(0.312500f, 0.500000f) },
		{ D3DXVECTOR3(0.463863f, 0.212133f, -1.119864f), D3DXVECTOR2(0.312500f, 0.146447f) },
		{ D3DXVECTOR3(0.426618f, 0.277165f, -1.029945f), D3DXVECTOR2(0.312500f, 0.038060f) },
		{ D3DXVECTOR3(0.382684f, 0.300001f, -0.923879f), D3DXVECTOR2(0.312500f, 0.000000f)},
		{ D3DXVECTOR3(0.338750f, 0.277164f, -0.817813f), D3DXVECTOR2(0.312500f, 0.038060f) },
		{ D3DXVECTOR3(0.301504f, 0.212132f, -0.727895f), D3DXVECTOR2(0.312500f, 0.146447f) },
		{ D3DXVECTOR3(0.276617f, 0.114805f, -0.667813f), D3DXVECTOR2(0.312500f, 0.308658f) },
		{ D3DXVECTOR3(0.267878f, 0.000000f, -0.646716f), D3DXVECTOR2(0.312500f, 0.500000f) },
		{ D3DXVECTOR3(0.276617f, -0.114805f, -0.667814f), D3DXVECTOR2(0.312500f, 0.691342f)},
		{ D3DXVECTOR3(0.301504f, -0.212132f, -0.727895f), D3DXVECTOR2(0.312500f, 0.853553f)},
		{ D3DXVECTOR3(0.338750f, -0.277163f, -0.817814f), D3DXVECTOR2(0.312500f, 0.961940f)},
		{ D3DXVECTOR3(0.382684f, -0.299999f, -0.923880f), D3DXVECTOR2(0.312500f, 1.000000f) },
		{ D3DXVECTOR3(0.426618f, -0.277163f, -1.029946f), D3DXVECTOR2(0.312500f, 0.961940f)},
		{ D3DXVECTOR3(0.463863f, -0.212131f, -1.119864f), D3DXVECTOR2(0.312500f, 0.853553f)},
		{ D3DXVECTOR3(0.488750f, -0.114804f, -1.179946f), D3DXVECTOR2(0.312500f, 0.691342f)},
		{ D3DXVECTOR3(0.249162f, 0.114806f, -1.252623f), D3DXVECTOR2(0.281250f, 0.308658f)},
		{ D3DXVECTOR3(0.253617f, 0.000001f, -1.275021f), D3DXVECTOR2(0.281250f, 0.500000f)},
		{ D3DXVECTOR3(0.236475f, 0.212133f, -1.188841f), D3DXVECTOR2(0.281250f, 0.146447f)},
		{ D3DXVECTOR3(0.217488f, 0.277165f, -1.093384f), D3DXVECTOR2(0.281250f, 0.038060f)},
		{ D3DXVECTOR3(0.195090f, 0.300001f, -0.980785f), D3DXVECTOR2(0.281250f, 0.000000f)},
		{ D3DXVECTOR3(0.172693f, 0.277164f, -0.868186f), D3DXVECTOR2(0.281250f, 0.038060f)},
		{ D3DXVECTOR3(0.153705f, 0.212133f, -0.772729f), D3DXVECTOR2(0.281250f, 0.146447f)},
		{ D3DXVECTOR3(0.141018f, 0.114805f, -0.708947f), D3DXVECTOR2(0.281250f, 0.308658f)},
		{ D3DXVECTOR3(0.136563f, 0.000000f, -0.686550f), D3DXVECTOR2(0.281250f, 0.500000f)},
		{ D3DXVECTOR3(0.141018f, -0.114805f, -0.708947f), D3DXVECTOR2(0.281250f, 0.691342f)},
		{ D3DXVECTOR3(0.153705f, -0.212132f, -0.772729f), D3DXVECTOR2(0.281250f, 0.853553f)},
		{ D3DXVECTOR3(0.172693f, -0.277163f, -0.868186f), D3DXVECTOR2(0.281250f, 0.961940f)},
		{ D3DXVECTOR3(0.195090f, -0.299999f, -0.980785f), D3DXVECTOR2(0.281250f, 1.000000f) },
		{ D3DXVECTOR3(0.217488f, -0.277163f, -1.093385f), D3DXVECTOR2(0.281250f, 0.961940f)},
		{ D3DXVECTOR3(0.236475f, -0.212131f, -1.188841f), D3DXVECTOR2(0.281250f, 0.853553f)},
		{ D3DXVECTOR3(0.249162f, -0.114804f, -1.252624f), D3DXVECTOR2(0.281250f, 0.691342f)},
		{ D3DXVECTOR3(0.000000f, 0.114806f, -1.277164f), D3DXVECTOR2(0.250000f, 0.308658f) },
		{ D3DXVECTOR3(0.000000f, 0.000001f, -1.300000f), D3DXVECTOR2(0.250000f, 0.500000f) },
		{ D3DXVECTOR3(0.000000f, 0.212133f, -1.212132f), D3DXVECTOR2(0.250000f, 0.146447f) },
		{ D3DXVECTOR3(0.000000f, 0.277165f, -1.114805f), D3DXVECTOR2(0.250000f, 0.038060f) },
		{ D3DXVECTOR3(0.000000f, 0.300001f, -1.000000f), D3DXVECTOR2(0.250000f, 0.000000f)},
		{ D3DXVECTOR3(0.000000f, 0.277164f, -0.885195f), D3DXVECTOR2(0.250000f, 0.038060f)},
		{ D3DXVECTOR3(0.000000f, 0.212133f, -0.787868f), D3DXVECTOR2(0.250000f, 0.146447f)},
		{ D3DXVECTOR3(0.000000f, 0.114805f, -0.722836f), D3DXVECTOR2(0.250000f, 0.308658f)},
		{ D3DXVECTOR3(0.000000f, 0.000000f, -0.700000f), D3DXVECTOR2(0.250000f, 0.500000f)},
		{ D3DXVECTOR3(0.000000f, -0.114805f, -0.722836f), D3DXVECTOR2(0.250000f, 0.691342f)},
		{ D3DXVECTOR3(0.000000f, -0.212132f, -0.787868f), D3DXVECTOR2(0.250000f, 0.853553f)},
		{ D3DXVECTOR3(0.000000f, -0.277163f, -0.885195f), D3DXVECTOR2(0.250000f, 0.961940f)},
		{ D3DXVECTOR3(0.000000f, -0.299999f, -1.000000f), D3DXVECTOR2(0.250000f, 1.000000f)},
		{ D3DXVECTOR3(0.000000f, -0.277163f, -1.114805f), D3DXVECTOR2(0.250000f, 0.961940f) },
		{ D3DXVECTOR3(0.000000f, -0.212131f, -1.212132f), D3DXVECTOR2(0.250000f, 0.853553f) },
		{ D3DXVECTOR3(0.000000f, -0.114804f, -1.277164f), D3DXVECTOR2(0.250000f, 0.691342f) },
		{ D3DXVECTOR3(-0.249162f, 0.114806f, -1.252623f), D3DXVECTOR2(0.218750f, 0.308658f)},
		{ D3DXVECTOR3(-0.253617f, 0.000001f, -1.275021f), D3DXVECTOR2(0.218750f, 0.500000f)},
		{ D3DXVECTOR3(-0.236475f, 0.212133f, -1.188841f), D3DXVECTOR2(0.218750f, 0.146447f)},
		{ D3DXVECTOR3(-0.217488f, 0.277165f, -1.093384f), D3DXVECTOR2(0.218750f, 0.038060f)},
		{ D3DXVECTOR3(-0.195090f, 0.300001f, -0.980785f), D3DXVECTOR2(0.218750f, 0.000000f) },
		{ D3DXVECTOR3(-0.172693f, 0.277164f, -0.868186f), D3DXVECTOR2(0.218750f, 0.038060f)},
		{ D3DXVECTOR3(-0.153705f, 0.212133f, -0.772729f), D3DXVECTOR2(0.218750f, 0.146447f)},
		{ D3DXVECTOR3(-0.141018f, 0.114805f, -0.708947f), D3DXVECTOR2(0.218750f, 0.308658f)},
		{ D3DXVECTOR3(-0.136563f, 0.000000f, -0.686550f), D3DXVECTOR2(0.218750f, 0.500000f)},
		{ D3DXVECTOR3(-0.141018f, -0.114805f, -0.708947f), D3DXVECTOR2(0.218750f, 0.691342f)},
		{ D3DXVECTOR3(-0.153705f, -0.212132f, -0.772729f), D3DXVECTOR2(0.218750f, 0.853553f)},
		{ D3DXVECTOR3(-0.172693f, -0.277163f, -0.868186f), D3DXVECTOR2(0.218750f, 0.961940f)},
		{ D3DXVECTOR3(-0.195090f, -0.299999f, -0.980785f), D3DXVECTOR2(0.218750f, 1.000000f)},
		{ D3DXVECTOR3(-0.217488f, -0.277163f, -1.093385f), D3DXVECTOR2(0.218750f, 0.961940f)},
		{ D3DXVECTOR3(-0.236475f, -0.212131f, -1.188841f), D3DXVECTOR2(0.218750f, 0.853553f)},
		{ D3DXVECTOR3(-0.249162f, -0.114804f, -1.252624f), D3DXVECTOR2(0.218750f, 0.691342f)},
		{ D3DXVECTOR3(-0.488750f, 0.114806f, -1.179945f), D3DXVECTOR2(0.187500f, 0.308658f)},
		{ D3DXVECTOR3(-0.497489f, 0.000001f, -1.201043f), D3DXVECTOR2(0.187500f, 0.500000f)},
		{ D3DXVECTOR3(-0.463863f, 0.212133f, -1.119864f), D3DXVECTOR2(0.187500f, 0.146447f)},
		{ D3DXVECTOR3(-0.426618f, 0.277165f, -1.029945f), D3DXVECTOR2(0.187500f, 0.038060f)},
		{ D3DXVECTOR3(-0.382684f, 0.300001f, -0.923879f), D3DXVECTOR2(0.187500f, 0.000000f) },
		{ D3DXVECTOR3(-0.338750f, 0.277164f, -0.817813f), D3DXVECTOR2(0.187500f, 0.038060f)},
		{ D3DXVECTOR3(-0.301504f, 0.212132f, -0.727895f), D3DXVECTOR2(0.187500f, 0.146447f)},
		{ D3DXVECTOR3(-0.276617f, 0.114805f, -0.667813f), D3DXVECTOR2(0.187500f, 0.308658f)},
		{ D3DXVECTOR3(-0.267878f, 0.000000f, -0.646716f), D3DXVECTOR2(0.187500f, 0.500000f)},
		{ D3DXVECTOR3(-0.276617f, -0.114805f, -0.667814f), D3DXVECTOR2(0.187500f, 0.691342f)},
		{ D3DXVECTOR3(-0.301504f, -0.212132f, -0.727895f), D3DXVECTOR2(0.187500f, 0.853553f)},
		{ D3DXVECTOR3(-0.338750f, -0.277163f, -0.817814f), D3DXVECTOR2(0.187500f, 0.961940f)},
		{ D3DXVECTOR3(-0.382684f, -0.299999f, -0.923880f), D3DXVECTOR2(0.187500f, 1.000000f) },
		{ D3DXVECTOR3(-0.426618f, -0.277163f, -1.029946f), D3DXVECTOR2(0.187500f, 0.961940f) },
		{ D3DXVECTOR3(-0.463863f, -0.212131f, -1.119864f), D3DXVECTOR2(0.187500f, 0.853553f) },
		{ D3DXVECTOR3(-0.488750f, -0.114804f, -1.179946f), D3DXVECTOR2(0.187500f, 0.691342f) },
		{ D3DXVECTOR3(-0.709554f, 0.114806f, -1.061923f), D3DXVECTOR2(0.156250f, 0.308658f) },
		{ D3DXVECTOR3(-0.722241f, 0.000001f, -1.080910f), D3DXVECTOR2(0.156250f, 0.500000f) },
		{ D3DXVECTOR3(-0.673425f, 0.212133f, -1.007851f), D3DXVECTOR2(0.156250f, 0.146447f) },
		{ D3DXVECTOR3(-0.619353f, 0.277164f, -0.926926f), D3DXVECTOR2(0.156250f, 0.038060f) },
		{ D3DXVECTOR3(-0.555570f, 0.300001f, -0.831469f), D3DXVECTOR2(0.156250f, 0.000000f)},
		{ D3DXVECTOR3(-0.491788f, 0.277164f, -0.736012f), D3DXVECTOR2(0.156250f, 0.038060f) },
		{ D3DXVECTOR3(-0.437716f, 0.212132f, -0.655088f), D3DXVECTOR2(0.156250f, 0.146447f) },
		{ D3DXVECTOR3(-0.401586f, 0.114805f, -0.601016f), D3DXVECTOR2(0.156250f, 0.308658f) },
		{ D3DXVECTOR3(-0.388899f, 0.000000f, -0.582029f), D3DXVECTOR2(0.156250f, 0.500000f) },
		{ D3DXVECTOR3(-0.401586f, -0.114805f, -0.601016f), D3DXVECTOR2(0.156250f, 0.691342f)},
		{ D3DXVECTOR3(-0.437716f, -0.212132f, -0.655088f), D3DXVECTOR2(0.156250f, 0.853553f)},
		{ D3DXVECTOR3(-0.491788f, -0.277163f, -0.736013f), D3DXVECTOR2(0.156250f, 0.961940f)},
		{ D3DXVECTOR3(-0.555570f, -0.299999f, -0.831470f), D3DXVECTOR2(0.156250f, 1.000000f)},
		{ D3DXVECTOR3(-0.619353f, -0.277163f, -0.926926f), D3DXVECTOR2(0.156250f, 0.961940f) },
		{ D3DXVECTOR3(-0.673425f, -0.212131f, -1.007851f), D3DXVECTOR2(0.156250f, 0.853553f) },
		{ D3DXVECTOR3(-0.709554f, -0.114804f, -1.061923f), D3DXVECTOR2(0.156250f, 0.691342f) },
		{ D3DXVECTOR3(-0.903091f, 0.114806f, -0.903091f), D3DXVECTOR2(0.125000f, 0.308658f) },
		{ D3DXVECTOR3(-0.919239f, 0.000001f, -0.919239f), D3DXVECTOR2(0.125000f, 0.500000f) },
		{ D3DXVECTOR3(-0.857107f, 0.212133f, -0.857107f), D3DXVECTOR2(0.125000f, 0.146447f)},
		{ D3DXVECTOR3(-0.788286f, 0.277164f, -0.788286f), D3DXVECTOR2(0.125000f, 0.038060f) },
		{ D3DXVECTOR3(-0.707107f, 0.300000f, -0.707107f), D3DXVECTOR2(0.125000f, 0.000000f) },
		{ D3DXVECTOR3(-0.625927f, 0.277164f, -0.625927f), D3DXVECTOR2(0.125000f, 0.038060f)},
		{ D3DXVECTOR3(-0.557107f, 0.212132f, -0.557107f), D3DXVECTOR2(0.125000f, 0.146447f)},
		{ D3DXVECTOR3(-0.511122f, 0.114805f, -0.511122f), D3DXVECTOR2(0.125000f, 0.308658f)},
		{ D3DXVECTOR3(-0.494975f, 0.000000f, -0.494975f), D3DXVECTOR2(0.125000f, 0.500000f)},
		{ D3DXVECTOR3(-0.511122f, -0.114805f, -0.511122f), D3DXVECTOR2(0.125000f, 0.691342f)},
		{ D3DXVECTOR3(-0.557107f, -0.212132f, -0.557107f), D3DXVECTOR2(0.125000f, 0.853553f)},
		{ D3DXVECTOR3(-0.625927f, -0.277163f, -0.625928f), D3DXVECTOR2(0.125000f, 0.961940f)},
		{ D3DXVECTOR3(-0.707107f, -0.300000f, -0.707107f), D3DXVECTOR2(0.125000f, 1.000000f) },
		{ D3DXVECTOR3(-0.788286f, -0.277163f, -0.788286f), D3DXVECTOR2(0.125000f, 0.961940f) },
		{ D3DXVECTOR3(-0.857107f, -0.212131f, -0.857107f), D3DXVECTOR2(0.125000f, 0.853553f) },
		{ D3DXVECTOR3(-0.903091f, -0.114804f, -0.903091f), D3DXVECTOR2(0.125000f, 0.691342f) },
		{ D3DXVECTOR3(-1.061923f, 0.114805f, -0.709554f), D3DXVECTOR2(0.093750f, 0.308658f) },
		{ D3DXVECTOR3(-1.080910f, 0.000000f, -0.722241f), D3DXVECTOR2(0.093750f, 0.500000f) },
		{ D3DXVECTOR3(-1.007851f, 0.212132f, -0.673424f), D3DXVECTOR2(0.093750f, 0.146447f) },
		{ D3DXVECTOR3(-0.926926f, 0.277164f, -0.619352f), D3DXVECTOR2(0.093750f, 0.038060f) },
		{ D3DXVECTOR3(-0.831469f, 0.300000f, -0.555570f), D3DXVECTOR2(0.093750f, 0.000000f) },
		{ D3DXVECTOR3(-0.736013f, 0.277164f, -0.491788f), D3DXVECTOR2(0.093750f, 0.038060f)},
		{ D3DXVECTOR3(-0.655088f, 0.212132f, -0.437716f), D3DXVECTOR2(0.093750f, 0.146447f)},
		{ D3DXVECTOR3(-0.601016f, 0.114805f, -0.401586f), D3DXVECTOR2(0.093750f, 0.308658f)},
		{ D3DXVECTOR3(-0.582029f, 0.000000f, -0.388899f), D3DXVECTOR2(0.093750f, 0.500000f)},
		{ D3DXVECTOR3(-0.601016f, -0.114805f, -0.401586f), D3DXVECTOR2(0.093750f, 0.691342f) },
		{ D3DXVECTOR3(-0.655088f, -0.212132f, -0.437716f), D3DXVECTOR2(0.093750f, 0.853553f) },
		{ D3DXVECTOR3(-0.736013f, -0.277164f, -0.491788f), D3DXVECTOR2(0.093750f, 0.961940f) },
		{ D3DXVECTOR3(-0.831469f, -0.300000f, -0.555570f), D3DXVECTOR2(0.093750f, 1.000000f) },
		{ D3DXVECTOR3(-0.926926f, -0.277163f, -0.619353f), D3DXVECTOR2(0.093750f, 0.961940f) },
		{ D3DXVECTOR3(-1.007851f, -0.212132f, -0.673425f), D3DXVECTOR2(0.093750f, 0.853553f) },
		{ D3DXVECTOR3(-1.061923f, -0.114805f, -0.709554f), D3DXVECTOR2(0.093750f, 0.691342f) },
		{ D3DXVECTOR3(-1.179945f, 0.114805f, -0.488749f), D3DXVECTOR2(0.062500f, 0.308658f) },
		{ D3DXVECTOR3(-1.201043f, 0.000000f, -0.497488f), D3DXVECTOR2(0.062500f, 0.500000f) },
		{ D3DXVECTOR3(-1.119864f, 0.212132f, -0.463863f), D3DXVECTOR2(0.062500f, 0.146447f) },
		{ D3DXVECTOR3(-1.029945f, 0.277164f, -0.426617f), D3DXVECTOR2(0.062500f, 0.038060f) },
		{ D3DXVECTOR3(-0.923879f, 0.300000f, -0.382683f), D3DXVECTOR2(0.062500f, 0.000000f) },
		{ D3DXVECTOR3(-0.817813f, 0.277164f, -0.338749f), D3DXVECTOR2(0.062500f, 0.038060f)},
		{ D3DXVECTOR3(-0.727895f, 0.212132f, -0.301504f), D3DXVECTOR2(0.062500f, 0.146447f)},
		{ D3DXVECTOR3(-0.667813f, 0.114805f, -0.276617f), D3DXVECTOR2(0.062500f, 0.308658f)},
		{ D3DXVECTOR3(-0.646716f, 0.000000f, -0.267878f), D3DXVECTOR2(0.062500f, 0.500000f)},
		{ D3DXVECTOR3(-0.667813f, -0.114805f, -0.276617f), D3DXVECTOR2(0.062500f, 0.691342f) },
		{ D3DXVECTOR3(-0.727895f, -0.212132f, -0.301504f), D3DXVECTOR2(0.062500f, 0.853553f) },
		{ D3DXVECTOR3(-0.817813f, -0.277164f, -0.338750f), D3DXVECTOR2(0.062500f, 0.961940f) },
		{ D3DXVECTOR3(-0.923879f, -0.300000f, -0.382684f), D3DXVECTOR2(0.062500f, 1.000000f) },
		{ D3DXVECTOR3(-1.029945f, -0.277164f, -0.426618f), D3DXVECTOR2(0.062500f, 0.961940f) },
		{ D3DXVECTOR3(-1.119864f, -0.212132f, -0.463863f), D3DXVECTOR2(0.062500f, 0.853553f) },
		{ D3DXVECTOR3(-1.179945f, -0.114805f, -0.488750f), D3DXVECTOR2(0.062500f, 0.691342f)},
		{ D3DXVECTOR3(-1.252624f, 0.114805f, -0.249162f), D3DXVECTOR2(0.031250f, 0.308658f) },
		{ D3DXVECTOR3(-1.275021f, 0.000000f, -0.253617f), D3DXVECTOR2(0.031250f, 0.500000f) },
		{ D3DXVECTOR3(-1.188841f, 0.212132f, -0.236475f), D3DXVECTOR2(0.031250f, 0.146447f) },
		{ D3DXVECTOR3(-1.093384f, 0.277164f, -0.217487f), D3DXVECTOR2(0.031250f, 0.038060f) },
		{ D3DXVECTOR3(-0.980785f, 0.300000f, -0.195090f), D3DXVECTOR2(0.031250f, 0.000000f) },
		{ D3DXVECTOR3(-0.868186f, 0.277164f, -0.172693f), D3DXVECTOR2(0.031250f, 0.038060f)},
		{ D3DXVECTOR3(-0.772729f, 0.212132f, -0.153705f), D3DXVECTOR2(0.031250f, 0.146447f)},
		{ D3DXVECTOR3(-0.708947f, 0.114805f, -0.141018f), D3DXVECTOR2(0.031250f, 0.308658f)},
		{ D3DXVECTOR3(-0.686550f, 0.000000f, -0.136563f), D3DXVECTOR2(0.031250f, 0.500000f)},
		{ D3DXVECTOR3(-0.708947f, -0.114805f, -0.141018f), D3DXVECTOR2(0.031250f, 0.691342f) },
		{ D3DXVECTOR3(-0.772729f, -0.212132f, -0.153705f), D3DXVECTOR2(0.031250f, 0.853553f) },
		{ D3DXVECTOR3(-0.868186f, -0.277164f, -0.172693f), D3DXVECTOR2(0.031250f, 0.961940f) },
		{ D3DXVECTOR3(-0.980785f, -0.300000f, -0.195090f), D3DXVECTOR2(0.031250f, 1.000000f) },
		{ D3DXVECTOR3(-1.093384f, -0.277164f, -0.217488f), D3DXVECTOR2(0.031250f, 0.961940f)  },
		{ D3DXVECTOR3(-1.188841f, -0.212132f, -0.236475f), D3DXVECTOR2(0.031250f, 0.853553f)  },
		{ D3DXVECTOR3(-1.252624f, -0.114805f, -0.249162f), D3DXVECTOR2(0.031250f, 0.691342f)  },
		{ D3DXVECTOR3(-1.277164f, 0.114805f, -0.000000f), D3DXVECTOR2(0.000000f, 0.308658f), },
		{ D3DXVECTOR3(-1.300000f, 0.000000f, -0.000000f), D3DXVECTOR2(0.000000f, 0.500000f),},
		{ D3DXVECTOR3(-1.212132f, 0.212132f, 0.000000f), D3DXVECTOR2(0.000000f, 0.146447f), },
		{ D3DXVECTOR3(-1.114805f, 0.277164f, 0.000000f), D3DXVECTOR2(0.000000f, 0.038060f), },
		{ D3DXVECTOR3(-1.000000f, 0.300000f, 0.000000f), D3DXVECTOR2(0.000000f, 0.000000f), },
		{ D3DXVECTOR3(-0.885195f, 0.277164f, 0.000000f), D3DXVECTOR2(0.000000f, 0.038060f), },
		{ D3DXVECTOR3(-0.787868f, 0.212132f, 0.000000f), D3DXVECTOR2(0.000000f, 0.146447f), },
		{ D3DXVECTOR3(-0.722836f, 0.114805f, 0.000000f), D3DXVECTOR2(0.000000f, 0.308658f), },
		{ D3DXVECTOR3(-0.700000f, 0.000000f, -0.000000f), D3DXVECTOR2(0.000000f, 0.500000f),},
		{ D3DXVECTOR3(-0.722836f, -0.114805f, -0.000000f), D3DXVECTOR2(0.000000f, 0.691342f)},
		{ D3DXVECTOR3(-0.787868f, -0.212132f, -0.000000f), D3DXVECTOR2(0.000000f, 0.853553f)},
		{ D3DXVECTOR3(-0.885195f, -0.277164f, -0.000000f), D3DXVECTOR2(0.000000f, 0.961940f)},
		{ D3DXVECTOR3(-1.000000f, -0.300000f, -0.000000f), D3DXVECTOR2(0.000000f, 1.000000f)},
		{ D3DXVECTOR3(-1.114805f, -0.277164f, -0.000000f), D3DXVECTOR2(0.000000f, 0.961940f) },
		{ D3DXVECTOR3(-1.212132f, -0.212132f, -0.000000f), D3DXVECTOR2(0.000000f, 0.853553f) },
		{ D3DXVECTOR3(-1.277164f, -0.114805f, -0.000000f), D3DXVECTOR2(0.000000f, 0.691342f) },
		{ D3DXVECTOR3(-1.252624f, 0.114805f, 0.249162f), D3DXVECTOR2(0.968750f, 0.308658f), },
		{ D3DXVECTOR3(-1.277164f, 0.114805f, -0.000000f), D3DXVECTOR2(1.000000f, 0.308658f), },
		{ D3DXVECTOR3(-1.300000f, 0.000000f, -0.000000f), D3DXVECTOR2(1.000000f, 0.500000f), },
		{ D3DXVECTOR3(-1.275021f, -0.000000f, 0.253617f), D3DXVECTOR2(0.968750f, 0.500000f), },
		{ D3DXVECTOR3(-1.188841f, 0.212132f, 0.236475f), D3DXVECTOR2(0.968750f, 0.146447f), },
		{ D3DXVECTOR3(-1.212132f, 0.212132f, 0.000000f), D3DXVECTOR2(1.000000f, 0.146447f),  },
		{ D3DXVECTOR3(-1.093384f, 0.277164f, 0.217488f), D3DXVECTOR2(0.968750f, 0.038060f), },
		{ D3DXVECTOR3(-1.114805f, 0.277164f, 0.000000f), D3DXVECTOR2(1.000000f, 0.038060f),  },
		{ D3DXVECTOR3(-0.980785f, 0.300000f, 0.195091f), D3DXVECTOR2(0.968750f, 0.000000f),  },
		{ D3DXVECTOR3(-1.000000f, 0.300000f, 0.000000f), D3DXVECTOR2(1.000000f, 0.000000f), },
		{ D3DXVECTOR3(-0.868186f, 0.277164f, 0.172693f), D3DXVECTOR2(0.968750f, 0.038060f), },
		{ D3DXVECTOR3(-0.885195f, 0.277164f, 0.000000f), D3DXVECTOR2(1.000000f, 0.038060f), },
		{ D3DXVECTOR3(-0.772729f, 0.212132f, 0.153706f), D3DXVECTOR2(0.968750f, 0.146447f), },
		{ D3DXVECTOR3(-0.787868f, 0.212132f, 0.000000f), D3DXVECTOR2(1.000000f, 0.146447f), },
		{ D3DXVECTOR3(-0.708947f, 0.114805f, 0.141018f), D3DXVECTOR2(0.968750f, 0.308658f), },
		{ D3DXVECTOR3(-0.722836f, 0.114805f, 0.000000f), D3DXVECTOR2(1.000000f, 0.308658f), },
		{ D3DXVECTOR3(-0.686550f, -0.000000f, 0.136563f), D3DXVECTOR2(0.968750f, 0.500000f), },
		{ D3DXVECTOR3(-0.700000f, 0.000000f, -0.000000f), D3DXVECTOR2(1.000000f, 0.500000f),},
		{ D3DXVECTOR3(-0.708947f, -0.114805f, 0.141018f), D3DXVECTOR2(0.968750f, 0.691342f), },
		{ D3DXVECTOR3(-0.722836f, -0.114805f, -0.000000f), D3DXVECTOR2(1.000000f, 0.691342f) },
		{ D3DXVECTOR3(-0.772729f, -0.212132f, 0.153705f), D3DXVECTOR2(0.968750f, 0.853553f), },
		{ D3DXVECTOR3(-0.787868f, -0.212132f, -0.000000f), D3DXVECTOR2(1.000000f, 0.853553f) },
		{ D3DXVECTOR3(-0.868186f, -0.277164f, 0.172693f), D3DXVECTOR2(0.968750f, 0.961940f), },
		{ D3DXVECTOR3(-0.885195f, -0.277164f, -0.000000f), D3DXVECTOR2(1.000000f, 0.961940f) },
		{ D3DXVECTOR3(-0.980785f, -0.300000f, 0.195090f), D3DXVECTOR2(0.968750f, 1.000000f),},
		{ D3DXVECTOR3(-1.000000f, -0.300000f, -0.000000f), D3DXVECTOR2(1.000000f, 1.000000f) },
		{ D3DXVECTOR3(-1.093384f, -0.277164f, 0.217487f), D3DXVECTOR2(0.968750f, 0.961940f), },
		{ D3DXVECTOR3(-1.114805f, -0.277164f, -0.000000f), D3DXVECTOR2(1.000000f, 0.961940f) },
		{ D3DXVECTOR3(-1.188841f, -0.212132f, 0.236475f), D3DXVECTOR2(0.968750f, 0.853553f),},
		{ D3DXVECTOR3(-1.212132f, -0.212132f, -0.000000f), D3DXVECTOR2(1.000000f, 0.853553f) },
		{ D3DXVECTOR3(-1.252624f, -0.114805f, 0.249162f), D3DXVECTOR2(0.968750f, 0.691342f),},
		{ D3DXVECTOR3(-1.277164f, -0.114805f, -0.000000f), D3DXVECTOR2(1.000000f, 0.691342f) },
		{ D3DXVECTOR3(-1.179945f, 0.114805f, 0.488750f), D3DXVECTOR2(0.937500f, 0.308658f), },
		{ D3DXVECTOR3(-1.201043f, -0.000000f, 0.497488f), D3DXVECTOR2(0.937500f, 0.500000f), },
		{ D3DXVECTOR3(-1.119864f, 0.212132f, 0.463863f), D3DXVECTOR2(0.937500f, 0.146447f), },
		{ D3DXVECTOR3(-1.029945f, 0.277164f, 0.426618f), D3DXVECTOR2(0.937500f, 0.038060f), },
		{ D3DXVECTOR3(-0.923879f, 0.300000f, 0.382684f), D3DXVECTOR2(0.937500f, 0.000000f),  },
		{ D3DXVECTOR3(-0.817813f, 0.277164f, 0.338750f), D3DXVECTOR2(0.937500f, 0.038060f), },
		{ D3DXVECTOR3(-0.727895f, 0.212132f, 0.301504f), D3DXVECTOR2(0.937500f, 0.146447f), },
		{ D3DXVECTOR3(-0.667813f, 0.114805f, 0.276617f), D3DXVECTOR2(0.937500f, 0.308658f), },
		{ D3DXVECTOR3(-0.646716f, -0.000000f, 0.267878f), D3DXVECTOR2(0.937500f, 0.500000f), },
		{ D3DXVECTOR3(-0.667813f, -0.114805f, 0.276617f), D3DXVECTOR2(0.937500f, 0.691342f), },
		{ D3DXVECTOR3(-0.727895f, -0.212132f, 0.301504f), D3DXVECTOR2(0.937500f, 0.853553f), },
		{ D3DXVECTOR3(-0.817813f, -0.277164f, 0.338749f), D3DXVECTOR2(0.937500f, 0.961940f), },
		{ D3DXVECTOR3(-0.923879f, -0.300000f, 0.382683f), D3DXVECTOR2(0.937500f, 1.000000f), },
		{ D3DXVECTOR3(-1.029945f, -0.277164f, 0.426617f), D3DXVECTOR2(0.937500f, 0.961940f), },
		{ D3DXVECTOR3(-1.119864f, -0.212132f, 0.463863f), D3DXVECTOR2(0.937500f, 0.853553f), },
		{ D3DXVECTOR3(-1.179945f, -0.114805f, 0.488749f), D3DXVECTOR2(0.937500f, 0.691342f), },
		{ D3DXVECTOR3(-1.061923f, 0.114805f, 0.709554f), D3DXVECTOR2(0.906250f, 0.308658f), },
		{ D3DXVECTOR3(-1.080911f, -0.000000f, 0.722241f), D3DXVECTOR2(0.906250f, 0.500000f), },
		{ D3DXVECTOR3(-1.007851f, 0.212132f, 0.673425f), D3DXVECTOR2(0.906250f, 0.146447f), },
		{ D3DXVECTOR3(-0.926927f, 0.277163f, 0.619353f), D3DXVECTOR2(0.906250f, 0.038060f), },
		{ D3DXVECTOR3(-0.831470f, 0.300000f, 0.555570f), D3DXVECTOR2(0.906250f, 0.000000f), },
		{ D3DXVECTOR3(-0.736013f, 0.277164f, 0.491788f), D3DXVECTOR2(0.906250f, 0.038060f), },
		{ D3DXVECTOR3(-0.655088f, 0.212132f, 0.437716f), D3DXVECTOR2(0.906250f, 0.146447f), },
		{ D3DXVECTOR3(-0.601016f, 0.114805f, 0.401586f), D3DXVECTOR2(0.906250f, 0.308658f), },
		{ D3DXVECTOR3(-0.582029f, -0.000000f, 0.388899f), D3DXVECTOR2(0.906250f, 0.500000f),},
		{ D3DXVECTOR3(-0.601016f, -0.114805f, 0.401586f), D3DXVECTOR2(0.906250f, 0.691342f), },
		{ D3DXVECTOR3(-0.655088f, -0.212132f, 0.437716f), D3DXVECTOR2(0.906250f, 0.853553f), },
		{ D3DXVECTOR3(-0.736013f, -0.277164f, 0.491788f), D3DXVECTOR2(0.906250f, 0.961940f), },
		{ D3DXVECTOR3(-0.831470f, -0.300000f, 0.555570f), D3DXVECTOR2(0.906250f, 1.000000f),},
		{ D3DXVECTOR3(-0.926927f, -0.277164f, 0.619352f), D3DXVECTOR2(0.906250f, 0.961940f), },
		{ D3DXVECTOR3(-1.007851f, -0.212132f, 0.673424f), D3DXVECTOR2(0.906250f, 0.853553f), },
		{ D3DXVECTOR3(-1.061923f, -0.114805f, 0.709554f), D3DXVECTOR2(0.906250f, 0.691342f), },
		{ D3DXVECTOR3(-0.903091f, 0.114804f, 0.903091f), D3DXVECTOR2(0.875000f, 0.308658f), },
		{ D3DXVECTOR3(-0.919239f, -0.000001f, 0.919239f), D3DXVECTOR2(0.875000f, 0.500000f),},
		{ D3DXVECTOR3(-0.857107f, 0.212131f, 0.857107f), D3DXVECTOR2(0.875000f, 0.146447f), },
		{ D3DXVECTOR3(-0.788286f, 0.277163f, 0.788286f), D3DXVECTOR2(0.875000f, 0.038060f), },
		{ D3DXVECTOR3(-0.707107f, 0.300000f, 0.707107f), D3DXVECTOR2(0.875000f, 0.000000f), },
		{ D3DXVECTOR3(-0.625927f, 0.277163f, 0.625928f), D3DXVECTOR2(0.875000f, 0.038060f), },
		{ D3DXVECTOR3(-0.557107f, 0.212132f, 0.557107f), D3DXVECTOR2(0.875000f, 0.146447f), },
		{ D3DXVECTOR3(-0.511122f, 0.114805f, 0.511122f), D3DXVECTOR2(0.875000f, 0.308658f), },
		{ D3DXVECTOR3(-0.494975f, -0.000000f, 0.494975f), D3DXVECTOR2(0.875000f, 0.500000f),},
		{ D3DXVECTOR3(-0.511122f, -0.114805f, 0.511122f), D3DXVECTOR2(0.875000f, 0.691342f), },
		{ D3DXVECTOR3(-0.557107f, -0.212132f, 0.557107f), D3DXVECTOR2(0.875000f, 0.853553f), },
		{ D3DXVECTOR3(-0.625927f, -0.277164f, 0.625927f), D3DXVECTOR2(0.875000f, 0.961940f), },
		{ D3DXVECTOR3(-0.707107f, -0.300000f, 0.707107f), D3DXVECTOR2(0.875000f, 1.000000f)},
		{ D3DXVECTOR3(-0.788286f, -0.277164f, 0.788286f), D3DXVECTOR2(0.875000f, 0.961940f) },
		{ D3DXVECTOR3(-0.857107f, -0.212133f, 0.857107f), D3DXVECTOR2(0.875000f, 0.853553f) },
		{ D3DXVECTOR3(-0.903091f, -0.114806f, 0.903091f), D3DXVECTOR2(0.875000f, 0.691342f) },
		{ D3DXVECTOR3(-0.709554f, 0.114804f, 1.061923f), D3DXVECTOR2(0.843750f, 0.308658f), },
		{ D3DXVECTOR3(-0.722241f, -0.000001f, 1.080910f), D3DXVECTOR2(0.843750f, 0.500000f) },
		{ D3DXVECTOR3(-0.673424f, 0.212131f, 1.007851f), D3DXVECTOR2(0.843750f, 0.146447f), },
		{ D3DXVECTOR3(-0.619352f, 0.277163f, 0.926927f), D3DXVECTOR2(0.843750f, 0.038060f), },
		{ D3DXVECTOR3(-0.555570f, 0.299999f, 0.831470f), D3DXVECTOR2(0.843750f, 0.000000f), },
		{ D3DXVECTOR3(-0.491788f, 0.277163f, 0.736013f), D3DXVECTOR2(0.843750f, 0.038060f), },
		{ D3DXVECTOR3(-0.437716f, 0.212132f, 0.655088f), D3DXVECTOR2(0.843750f, 0.146447f), },
		{ D3DXVECTOR3(-0.401586f, 0.114805f, 0.601016f), D3DXVECTOR2(0.843750f, 0.308658f), },
		{ D3DXVECTOR3(-0.388899f, -0.000000f, 0.582029f), D3DXVECTOR2(0.843750f, 0.500000f) },
		{ D3DXVECTOR3(-0.401586f, -0.114805f, 0.601016f), D3DXVECTOR2(0.843750f, 0.691342f)  },
		{ D3DXVECTOR3(-0.437716f, -0.212132f, 0.655088f), D3DXVECTOR2(0.843750f, 0.853553f)  },
		{ D3DXVECTOR3(-0.491788f, -0.277164f, 0.736013f), D3DXVECTOR2(0.843750f, 0.961940f)  },
		{ D3DXVECTOR3(-0.555570f, -0.300001f, 0.831469f), D3DXVECTOR2(0.843750f, 1.000000f) },
		{ D3DXVECTOR3(-0.619352f, -0.277164f, 0.926926f), D3DXVECTOR2(0.843750f, 0.961940f)  },
		{ D3DXVECTOR3(-0.673424f, -0.212133f, 1.007851f), D3DXVECTOR2(0.843750f, 0.853553f)  },
		{ D3DXVECTOR3(-0.709554f, -0.114806f, 1.061923f), D3DXVECTOR2(0.843750f, 0.691342f)  },
		{ D3DXVECTOR3(-0.488749f, 0.114804f, 1.179946f), D3DXVECTOR2(0.812500f, 0.308658f), },
		{ D3DXVECTOR3(-0.497488f, -0.000001f, 1.201043f), D3DXVECTOR2(0.812500f, 0.500000f) },
		{ D3DXVECTOR3(-0.463863f, 0.212131f, 1.119864f), D3DXVECTOR2(0.812500f, 0.146447f), },
		{ D3DXVECTOR3(-0.426617f, 0.277163f, 1.029946f), D3DXVECTOR2(0.812500f, 0.038060f), },
		{ D3DXVECTOR3(-0.382683f, 0.299999f, 0.923880f), D3DXVECTOR2(0.812500f, 0.000000f), },
		{ D3DXVECTOR3(-0.338749f, 0.277163f, 0.817814f), D3DXVECTOR2(0.812500f, 0.038060f), },
		{ D3DXVECTOR3(-0.301504f, 0.212132f, 0.727895f), D3DXVECTOR2(0.812500f, 0.146447f), },
		{ D3DXVECTOR3(-0.276617f, 0.114805f, 0.667814f), D3DXVECTOR2(0.812500f, 0.308658f), },
		{ D3DXVECTOR3(-0.267878f, -0.000000f, 0.646716f), D3DXVECTOR2(0.812500f, 0.500000f) },
		{ D3DXVECTOR3(-0.276617f, -0.114805f, 0.667813f), D3DXVECTOR2(0.812500f, 0.691342f)  },
		{ D3DXVECTOR3(-0.301504f, -0.212132f, 0.727895f), D3DXVECTOR2(0.812500f, 0.853553f), },
		{ D3DXVECTOR3(-0.338749f, -0.277164f, 0.817813f), D3DXVECTOR2(0.812500f, 0.961940f), },
		{ D3DXVECTOR3(-0.382683f, -0.300001f, 0.923879f), D3DXVECTOR2(0.812500f, 1.000000f),},
		{ D3DXVECTOR3(-0.426617f, -0.277165f, 1.029945f), D3DXVECTOR2(0.812500f, 0.961940f), },
		{ D3DXVECTOR3(-0.463863f, -0.212133f, 1.119864f), D3DXVECTOR2(0.812500f, 0.853553f), },
		{ D3DXVECTOR3(-0.488749f, -0.114806f, 1.179945f), D3DXVECTOR2(0.812500f, 0.691342f), },
		{ D3DXVECTOR3(-0.249162f, 0.114804f, 1.252624f), D3DXVECTOR2(0.781250f, 0.308658f),},
		{ D3DXVECTOR3(-0.253617f, -0.000001f, 1.275021f), D3DXVECTOR2(0.781250f, 0.500000f) },
		{ D3DXVECTOR3(-0.236475f, 0.212131f, 1.188841f), D3DXVECTOR2(0.781250f, 0.146447f),},
		{ D3DXVECTOR3(-0.217488f, 0.277163f, 1.093384f), D3DXVECTOR2(0.781250f, 0.038060f),},
		{ D3DXVECTOR3(-0.195090f, 0.299999f, 0.980785f), D3DXVECTOR2(0.781250f, 0.000000f), },
		{ D3DXVECTOR3(-0.172693f, 0.277163f, 0.868186f), D3DXVECTOR2(0.781250f, 0.038060f),},
		{ D3DXVECTOR3(-0.153705f, 0.212132f, 0.772729f), D3DXVECTOR2(0.781250f, 0.146447f),},
		{ D3DXVECTOR3(-0.141018f, 0.114805f, 0.708947f), D3DXVECTOR2(0.781250f, 0.308658f),},
		{ D3DXVECTOR3(-0.136563f, -0.000000f, 0.686550f), D3DXVECTOR2(0.781250f, 0.500000f) },
		{ D3DXVECTOR3(-0.141018f, -0.114805f, 0.708947f), D3DXVECTOR2(0.781250f, 0.691342f) },
		{ D3DXVECTOR3(-0.153705f, -0.212133f, 0.772729f), D3DXVECTOR2(0.781250f, 0.853553f) },
		{ D3DXVECTOR3(-0.172693f, -0.277164f, 0.868186f), D3DXVECTOR2(0.781250f, 0.961940f) },
		{ D3DXVECTOR3(-0.195090f, -0.300001f, 0.980785f), D3DXVECTOR2(0.781250f, 1.000000f) },
		{ D3DXVECTOR3(-0.217488f, -0.277165f, 1.093384f), D3DXVECTOR2(0.781250f, 0.961940f) },
		{ D3DXVECTOR3(-0.236475f, -0.212133f, 1.188841f), D3DXVECTOR2(0.781250f, 0.853553f) },
		{ D3DXVECTOR3(-0.249162f, -0.114806f, 1.252623f), D3DXVECTOR2(0.781250f, 0.691342f) },
		{ D3DXVECTOR3(0.000000f, 0.114804f, 1.277164f), D3DXVECTOR2(0.750000f, 0.308658f), },
		{ D3DXVECTOR3(0.000000f, -0.000001f, 1.300000f), D3DXVECTOR2(0.750000f, 0.500000f),},
		{ D3DXVECTOR3(0.000000f, 0.212131f, 1.212132f), D3DXVECTOR2(0.750000f, 0.146447f), },
		{ D3DXVECTOR3(0.000000f, 0.277163f, 1.114805f), D3DXVECTOR2(0.750000f, 0.038060f), },
		{ D3DXVECTOR3(0.000000f, 0.299999f, 1.000000f), D3DXVECTOR2(0.750000f, 0.000000f), },
		{ D3DXVECTOR3(0.000000f, 0.277163f, 0.885195f), D3DXVECTOR2(0.750000f, 0.038060f),  },
		{ D3DXVECTOR3(0.000000f, 0.212132f, 0.787868f), D3DXVECTOR2(0.750000f, 0.146447f),  },
		{ D3DXVECTOR3(0.000000f, 0.114805f, 0.722836f), D3DXVECTOR2(0.750000f, 0.308658f),  },
		{ D3DXVECTOR3(0.000000f, -0.000000f, 0.700000f), D3DXVECTOR2(0.750000f, 0.500000f), },
		{ D3DXVECTOR3(0.000000f, -0.114805f, 0.722836f), D3DXVECTOR2(0.750000f, 0.691342f), },
		{ D3DXVECTOR3(0.000000f, -0.212133f, 0.787868f), D3DXVECTOR2(0.750000f, 0.853553f), },
		{ D3DXVECTOR3(0.000000f, -0.277164f, 0.885195f), D3DXVECTOR2(0.750000f, 0.961940f), },
		{ D3DXVECTOR3(0.000000f, -0.300001f, 1.000000f), D3DXVECTOR2(0.750000f, 1.000000f), },
		{ D3DXVECTOR3(0.000000f, -0.277165f, 1.114805f), D3DXVECTOR2(0.750000f, 0.961940f), },
		{ D3DXVECTOR3(0.000000f, -0.212133f, 1.212132f), D3DXVECTOR2(0.750000f, 0.853553f), },
		{ D3DXVECTOR3(0.000000f, -0.114806f, 1.277164f), D3DXVECTOR2(0.750000f, 0.691342f), },
		{ D3DXVECTOR3(0.249162f, 0.114804f, 1.252624f), D3DXVECTOR2(0.718750f, 0.308658f), },
		{ D3DXVECTOR3(0.253617f, -0.000001f, 1.275021f), D3DXVECTOR2(0.718750f, 0.500000f), },
		{ D3DXVECTOR3(0.236475f, 0.212131f, 1.188841f), D3DXVECTOR2(0.718750f, 0.146447f), },
		{ D3DXVECTOR3(0.217488f, 0.277163f, 1.093385f), D3DXVECTOR2(0.718750f, 0.038060f), },
		{ D3DXVECTOR3(0.195090f, 0.299999f, 0.980785f), D3DXVECTOR2(0.718750f, 0.000000f), },
		{ D3DXVECTOR3(0.172693f, 0.277163f, 0.868186f), D3DXVECTOR2(0.718750f, 0.038060f),  },
		{ D3DXVECTOR3(0.153705f, 0.212132f, 0.772729f), D3DXVECTOR2(0.718750f, 0.146447f),  },
		{ D3DXVECTOR3(0.141018f, 0.114805f, 0.708947f), D3DXVECTOR2(0.718750f, 0.308658f),  },
		{ D3DXVECTOR3(0.136563f, -0.000000f, 0.686550f), D3DXVECTOR2(0.718750f, 0.500000f),  },
		{ D3DXVECTOR3(0.141018f, -0.114805f, 0.708947f), D3DXVECTOR2(0.718750f, 0.691342f), },
		{ D3DXVECTOR3(0.153705f, -0.212133f, 0.772729f), D3DXVECTOR2(0.718750f, 0.853553f), },
		{ D3DXVECTOR3(0.172693f, -0.277164f, 0.868186f), D3DXVECTOR2(0.718750f, 0.961940f), },
		{ D3DXVECTOR3(0.195090f, -0.300001f, 0.980785f), D3DXVECTOR2(0.718750f, 1.000000f), },
		{ D3DXVECTOR3(0.217488f, -0.277165f, 1.093384f), D3DXVECTOR2(0.718750f, 0.961940f), },
		{ D3DXVECTOR3(0.236475f, -0.212133f, 1.188841f), D3DXVECTOR2(0.718750f, 0.853553f), },
		{ D3DXVECTOR3(0.249162f, -0.114806f, 1.252623f), D3DXVECTOR2(0.718750f, 0.691342f), },
		{ D3DXVECTOR3(0.488749f, 0.114804f, 1.179946f), D3DXVECTOR2(0.687500f, 0.308658f), },
		{ D3DXVECTOR3(0.497488f, -0.000001f, 1.201043f), D3DXVECTOR2(0.687500f, 0.500000f), },
		{ D3DXVECTOR3(0.463863f, 0.212131f, 1.119864f), D3DXVECTOR2(0.687500f, 0.146447f), },
		{ D3DXVECTOR3(0.426617f, 0.277163f, 1.029946f), D3DXVECTOR2(0.687500f, 0.038060f), },
		{ D3DXVECTOR3(0.382683f, 0.299999f, 0.923880f), D3DXVECTOR2(0.687500f, 0.000000f), },
		{ D3DXVECTOR3(0.338749f, 0.277163f, 0.817814f), D3DXVECTOR2(0.687500f, 0.038060f), },
		{ D3DXVECTOR3(0.301504f, 0.212132f, 0.727895f), D3DXVECTOR2(0.687500f, 0.146447f), },
		{ D3DXVECTOR3(0.276617f, 0.114805f, 0.667814f), D3DXVECTOR2(0.687500f, 0.308658f), },
		{ D3DXVECTOR3(0.267878f, -0.000000f, 0.646716f), D3DXVECTOR2(0.687500f, 0.500000f),  },
		{ D3DXVECTOR3(0.276617f, -0.114805f, 0.667813f), D3DXVECTOR2(0.687500f, 0.691342f),  },
		{ D3DXVECTOR3(0.301504f, -0.212132f, 0.727895f), D3DXVECTOR2(0.687500f, 0.853553f),  },
		{ D3DXVECTOR3(0.338749f, -0.277164f, 0.817813f), D3DXVECTOR2(0.687500f, 0.961940f),  },
		{ D3DXVECTOR3(0.382683f, -0.300001f, 0.923879f), D3DXVECTOR2(0.687500f, 1.000000f),  },
		{ D3DXVECTOR3(0.426617f, -0.277165f, 1.029945f), D3DXVECTOR2(0.687500f, 0.961940f), },
		{ D3DXVECTOR3(0.463863f, -0.212133f, 1.119864f), D3DXVECTOR2(0.687500f, 0.853553f), },
		{ D3DXVECTOR3(0.488749f, -0.114806f, 1.179945f), D3DXVECTOR2(0.687500f, 0.691342f), },
		{ D3DXVECTOR3(0.709554f, 0.114804f, 1.061923f), D3DXVECTOR2(0.656250f, 0.308658f), },
		{ D3DXVECTOR3(0.722241f, -0.000001f, 1.080910f), D3DXVECTOR2(0.656250f, 0.500000f), },
		{ D3DXVECTOR3(0.673425f, 0.212131f, 1.007851f), D3DXVECTOR2(0.656250f, 0.146447f), },
		{ D3DXVECTOR3(0.619353f, 0.277163f, 0.926927f), D3DXVECTOR2(0.656250f, 0.038060f), },
		{ D3DXVECTOR3(0.555570f, 0.299999f, 0.831470f), D3DXVECTOR2(0.656250f, 0.000000f),  },
		{ D3DXVECTOR3(0.491788f, 0.277163f, 0.736013f), D3DXVECTOR2(0.656250f, 0.038060f), },
		{ D3DXVECTOR3(0.437716f, 0.212132f, 0.655088f), D3DXVECTOR2(0.656250f, 0.146447f), },
		{ D3DXVECTOR3(0.401586f, 0.114805f, 0.601016f), D3DXVECTOR2(0.656250f, 0.308658f), },
		{ D3DXVECTOR3(0.388899f, -0.000000f, 0.582029f), D3DXVECTOR2(0.656250f, 0.500000f), },
		{ D3DXVECTOR3(0.401586f, -0.114805f, 0.601016f), D3DXVECTOR2(0.656250f, 0.691342f), },
		{ D3DXVECTOR3(0.437716f, -0.212132f, 0.655088f), D3DXVECTOR2(0.656250f, 0.853553f), },
		{ D3DXVECTOR3(0.491788f, -0.277164f, 0.736013f), D3DXVECTOR2(0.656250f, 0.961940f), },
		{ D3DXVECTOR3(0.555570f, -0.300001f, 0.831469f), D3DXVECTOR2(0.656250f, 1.000000f), },
		{ D3DXVECTOR3(0.619353f, -0.277164f, 0.926926f), D3DXVECTOR2(0.656250f, 0.961940f), },
		{ D3DXVECTOR3(0.673425f, -0.212133f, 1.007851f), D3DXVECTOR2(0.656250f, 0.853553f), },
		{ D3DXVECTOR3(0.709554f, -0.114806f, 1.061923f), D3DXVECTOR2(0.656250f, 0.691342f), },
		{ D3DXVECTOR3(0.903091f, 0.114804f, 0.903091f), D3DXVECTOR2(0.625000f, 0.308658f), },
		{ D3DXVECTOR3(0.919239f, -0.000001f, 0.919239f), D3DXVECTOR2(0.625000f, 0.500000f), },
		{ D3DXVECTOR3(0.857107f, 0.212131f, 0.857107f), D3DXVECTOR2(0.625000f, 0.146447f), },
		{ D3DXVECTOR3(0.788286f, 0.277163f, 0.788286f), D3DXVECTOR2(0.625000f, 0.038060f), },
		{ D3DXVECTOR3(0.707107f, 0.300000f, 0.707107f), D3DXVECTOR2(0.625000f, 0.000000f),  },
		{ D3DXVECTOR3(0.625927f, 0.277163f, 0.625928f), D3DXVECTOR2(0.625000f, 0.038060f),  },
		{ D3DXVECTOR3(0.557107f, 0.212132f, 0.557107f), D3DXVECTOR2(0.625000f, 0.146447f),  },
		{ D3DXVECTOR3(0.511122f, 0.114805f, 0.511122f), D3DXVECTOR2(0.625000f, 0.308658f),  },
		{ D3DXVECTOR3(0.494975f, -0.000000f, 0.494975f), D3DXVECTOR2(0.625000f, 0.500000f), },
		{ D3DXVECTOR3(0.511122f, -0.114805f, 0.511122f), D3DXVECTOR2(0.625000f, 0.691342f),  },
		{ D3DXVECTOR3(0.557107f, -0.212132f, 0.557107f), D3DXVECTOR2(0.625000f, 0.853553f),  },
		{ D3DXVECTOR3(0.625927f, -0.277164f, 0.625927f), D3DXVECTOR2(0.625000f, 0.961940f),  },
		{ D3DXVECTOR3(0.707107f, -0.300000f, 0.707107f), D3DXVECTOR2(0.625000f, 1.000000f),  },
		{ D3DXVECTOR3(0.788286f, -0.277164f, 0.788286f), D3DXVECTOR2(0.625000f, 0.961940f), },
		{ D3DXVECTOR3(0.857107f, -0.212133f, 0.857107f), D3DXVECTOR2(0.625000f, 0.853553f), },
		{ D3DXVECTOR3(0.903091f, -0.114806f, 0.903091f), D3DXVECTOR2(0.625000f, 0.691342f), },
		{ D3DXVECTOR3(1.061923f, 0.114805f, 0.709554f), D3DXVECTOR2(0.593750f, 0.308658f), },
		{ D3DXVECTOR3(1.080911f, -0.000000f, 0.722241f), D3DXVECTOR2(0.593750f, 0.500000f), },
		{ D3DXVECTOR3(1.007851f, 0.212132f, 0.673425f), D3DXVECTOR2(0.593750f, 0.146447f), },
		{ D3DXVECTOR3(0.926926f, 0.277163f, 0.619353f), D3DXVECTOR2(0.593750f, 0.038060f), },
		{ D3DXVECTOR3(0.831470f, 0.300000f, 0.555570f), D3DXVECTOR2(0.593750f, 0.000000f), },
		{ D3DXVECTOR3(0.736013f, 0.277164f, 0.491788f), D3DXVECTOR2(0.593750f, 0.038060f),  },
		{ D3DXVECTOR3(0.655088f, 0.212132f, 0.437716f), D3DXVECTOR2(0.593750f, 0.146447f),  },
		{ D3DXVECTOR3(0.601016f, 0.114805f, 0.401586f), D3DXVECTOR2(0.593750f, 0.308658f),  },
		{ D3DXVECTOR3(0.582029f, -0.000000f, 0.388899f), D3DXVECTOR2(0.593750f, 0.500000f), },
		{ D3DXVECTOR3(0.601016f, -0.114805f, 0.401586f), D3DXVECTOR2(0.593750f, 0.691342f)},
		{ D3DXVECTOR3(0.655088f, -0.212132f, 0.437716f), D3DXVECTOR2(0.593750f, 0.853553f)},
		{ D3DXVECTOR3(0.736013f, -0.277164f, 0.491788f), D3DXVECTOR2(0.593750f, 0.961940f)},
		{ D3DXVECTOR3(0.831470f, -0.300000f, 0.555570f), D3DXVECTOR2(0.593750f, 1.000000f) },
		{ D3DXVECTOR3(0.926926f, -0.277164f, 0.619352f), D3DXVECTOR2(0.593750f, 0.961940f)},
		{ D3DXVECTOR3(1.007851f, -0.212132f, 0.673424f), D3DXVECTOR2(0.593750f, 0.853553f)},
		{ D3DXVECTOR3(1.061923f, -0.114805f, 0.709554f), D3DXVECTOR2(0.593750f, 0.691342f)},
		{ D3DXVECTOR3(1.179945f, 0.114805f, 0.488750f), D3DXVECTOR2(0.562500f, 0.308658f), },
		{ D3DXVECTOR3(1.201043f, -0.000000f, 0.497488f), D3DXVECTOR2(0.562500f, 0.500000f)},
		{ D3DXVECTOR3(1.119864f, 0.212132f, 0.463863f), D3DXVECTOR2(0.562500f, 0.146447f), },
		{ D3DXVECTOR3(1.029945f, 0.277164f, 0.426618f), D3DXVECTOR2(0.562500f, 0.038060f), },
		{ D3DXVECTOR3(0.923879f, 0.300000f, 0.382684f), D3DXVECTOR2(0.562500f, 0.000000f), },
		{ D3DXVECTOR3(0.817813f, 0.277164f, 0.338750f), D3DXVECTOR2(0.562500f, 0.038060f), },
		{ D3DXVECTOR3(0.727895f, 0.212132f, 0.301504f), D3DXVECTOR2(0.562500f, 0.146447f), },
		{ D3DXVECTOR3(0.667813f, 0.114805f, 0.276617f), D3DXVECTOR2(0.562500f, 0.308658f), },
		{ D3DXVECTOR3(0.646716f, -0.000000f, 0.267878f), D3DXVECTOR2(0.562500f, 0.500000f)},
		{ D3DXVECTOR3(0.667813f, -0.114805f, 0.276617f), D3DXVECTOR2(0.562500f, 0.691342f) },
		{ D3DXVECTOR3(0.727895f, -0.212132f, 0.301504f), D3DXVECTOR2(0.562500f, 0.853553f) },
		{ D3DXVECTOR3(0.817813f, -0.277164f, 0.338749f), D3DXVECTOR2(0.562500f, 0.961940f) },
		{ D3DXVECTOR3(0.923879f, -0.300000f, 0.382683f), D3DXVECTOR2(0.562500f, 1.000000f)  },
		{ D3DXVECTOR3(1.029945f, -0.277164f, 0.426617f), D3DXVECTOR2(0.562500f, 0.961940f)  },
		{ D3DXVECTOR3(1.119864f, -0.212132f, 0.463863f), D3DXVECTOR2(0.562500f, 0.853553f)  },
		{ D3DXVECTOR3(1.179945f, -0.114805f, 0.488749f), D3DXVECTOR2(0.562500f, 0.691342f) },
		{ D3DXVECTOR3(1.252624f, 0.114805f, 0.249162f), D3DXVECTOR2(0.531250f, 0.308658f), },
		{ D3DXVECTOR3(1.275021f, -0.000000f, 0.253617f), D3DXVECTOR2(0.531250f, 0.500000f)  },
		{ D3DXVECTOR3(1.188841f, 0.212132f, 0.236475f), D3DXVECTOR2(0.531250f, 0.146447f), },
		{ D3DXVECTOR3(1.093384f, 0.277164f, 0.217488f), D3DXVECTOR2(0.531250f, 0.038060f), },
		{ D3DXVECTOR3(0.980785f, 0.300000f, 0.195091f), D3DXVECTOR2(0.531250f, 0.000000f), },
		{ D3DXVECTOR3(0.868186f, 0.277164f, 0.172693f), D3DXVECTOR2(0.531250f, 0.038060f),},
		{ D3DXVECTOR3(0.772729f, 0.212132f, 0.153706f), D3DXVECTOR2(0.531250f, 0.146447f),},
		{ D3DXVECTOR3(0.708947f, 0.114805f, 0.141018f), D3DXVECTOR2(0.531250f, 0.308658f),},
		{ D3DXVECTOR3(0.686550f, -0.000000f, 0.136563f), D3DXVECTOR2(0.531250f, 0.500000f) },
		{ D3DXVECTOR3(0.708947f, -0.114805f, 0.141018f), D3DXVECTOR2(0.531250f, 0.691342f) },
		{ D3DXVECTOR3(0.772729f, -0.212132f, 0.153705f), D3DXVECTOR2(0.531250f, 0.853553f) },
		{ D3DXVECTOR3(0.868186f, -0.277164f, 0.172693f), D3DXVECTOR2(0.531250f, 0.961940f) },
		{ D3DXVECTOR3(0.980785f, -0.300000f, 0.195090f), D3DXVECTOR2(0.531250f, 1.000000f) },
		{ D3DXVECTOR3(1.093384f, -0.277164f, 0.217487f), D3DXVECTOR2(0.531250f, 0.961940f)},
		{ D3DXVECTOR3(1.188841f, -0.212132f, 0.236475f), D3DXVECTOR2(0.531250f, 0.853553f)},
		{ D3DXVECTOR3(1.252624f, -0.114805f, 0.249162f), D3DXVECTOR2(0.531250f, 0.691342f)},

	};

	D3D10_BUFFER_DESC bd;
	bd.Usage = D3D10_USAGE_DEFAULT;
	bd.ByteWidth = sizeof(SimpleVertex)* vcount;// 24 вершины
	bd.BindFlags = D3D10_BIND_VERTEX_BUFFER;
	bd.CPUAccessFlags = 0;
	bd.MiscFlags = 0;
	D3D10_SUBRESOURCE_DATA InitData;
	InitData.pSysMem = vertices;
	hr = g_pd3dDevice->CreateBuffer(&bd, &InitData, &g_pVertexBuffer);
	if (FAILED(hr))
		return hr;

	// Связываем буфер вершин с графическим конвейером
	UINT stride = sizeof(SimpleVertex);
	UINT offset = 0;
	g_pd3dDevice->IASetVertexBuffers(0, 1, &g_pVertexBuffer, &stride, &offset);

	bd.Usage = D3D10_USAGE_DEFAULT;
	bd.ByteWidth = sizeof(DWORD)* icount;// нужно 36 вершин для 12 треугольников
	bd.BindFlags = D3D10_BIND_INDEX_BUFFER;
	bd.CPUAccessFlags = 0;
	bd.MiscFlags = 0;
	InitData.pSysMem = indices;
	hr = g_pd3dDevice->CreateBuffer(&bd, &InitData, &g_pIndexBuffer);
	if (FAILED(hr))
		return hr;

	g_pd3dDevice->IASetIndexBuffer(g_pIndexBuffer, DXGI_FORMAT_R32_UINT, 0);

	g_pd3dDevice->IASetPrimitiveTopology(D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST);

	D3DXMatrixIdentity(&g_World);

	D3DXVECTOR3 Eye(0.0f, 2.0f, -5.0f);
	D3DXVECTOR3 At(0.0f, 0.0f, 0.0f);
	D3DXVECTOR3 Up(0.0f, 1.0f, 0.0f);
	D3DXMatrixLookAtLH(&g_View, &Eye, &At, &Up);

	D3DXMatrixPerspectiveFovLH(&g_Projection, (float)D3DX_PI * 0.25f, width / (FLOAT)height, 0.1f, 100.0f);
	
	return S_OK;
}

//--------------------------------------------------------------------------------------
// Прорисовка трехмерной сцены
//--------------------------------------------------------------------------------------
void RenderScene()
{
	// Счетчик времени
	static float t = 0.0f;
	if (g_driverType == D3D10_DRIVER_TYPE_REFERENCE)
	{
		t += (float)D3DX_PI * 0.0125f;
	}
	else
	{
		static DWORD dwTimeStart = 0;
		DWORD dwTimeCur = GetTickCount();
		if (dwTimeStart == 0)
			dwTimeStart = dwTimeCur;
		t = (dwTimeCur - dwTimeStart) / 1000.0f;
	}


	// Матрица поворота треугольника
	// на угол в зависимости от времени t
	D3DXMatrixRotationY(&g_World, t);

	// Очищаем вторичный буфер
	float ClearColor[4] = { 0.5f, 0.5f, 0.9f, 1.0f }; 
	g_pd3dDevice->ClearRenderTargetView(g_pRenderTargetView, ClearColor);

	// Передаем информацию о матрицах преобразования
	g_pWorldVariable->SetMatrix((float*)&g_World);
	g_pViewVariable->SetMatrix((float*)&g_View);
	g_pProjectionVariable->SetMatrix((float*)&g_Projection);


	D3D10_TECHNIQUE_DESC techDesc;
	g_pTechnique->GetDesc(&techDesc);
	for (UINT p = 0; p < techDesc.Passes; ++p)
	{
		g_pTechnique->GetPassByIndex(p)->Apply(0);
		g_pd3dDevice->DrawIndexed(3072, 0, 0);
	}
	g_pSwapChain->Present(0, 0);
}
//--------------------------------------------------------------------------------------
// Обработка сообщений
//--------------------------------------------------------------------------------------
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	switch (message)
	{

	case WM_DESTROY:
		PostQuitMessage(0);
		break;

	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}

	return 0;
}

//--------------------------------------------------------------------------------------
// Очищаем память 
//--------------------------------------------------------------------------------------
void Cleanup()
{
	if (g_pd3dDevice) g_pd3dDevice->ClearState();

	if (g_pRenderTargetView) g_pRenderTargetView->Release();
	if (g_pSwapChain) g_pSwapChain->Release();
	if (g_pd3dDevice) g_pd3dDevice->Release();
}

